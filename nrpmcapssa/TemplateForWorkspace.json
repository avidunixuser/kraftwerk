{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "nrpmcapssa"
		},
		"AzureBlobStorage1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage1'"
		},
		"AzureDataLakeStorage2_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeStorage2'"
		},
		"AzureDataLakeStorage3_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeStorage3'"
		},
		"AzureDataLakeStorage4_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeStorage4'"
		},
		"AzureSqlDatabase1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabase1'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=nrpsqlpaasserver.database.windows.net;Initial Catalog=nrpsqlpaas"
		},
		"AzureSqlDatabase1_servicePrincipalKey": {
			"type": "secureString",
			"metadata": "Secure string for 'servicePrincipalKey' of 'AzureSqlDatabase1'"
		},
		"BSCC_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'BSCC'"
		},
		"BSCCAdultCovid_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'BSCCAdultCovid'"
		},
		"BSCCDedicatedPoolAdultCovid_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'BSCCDedicatedPoolAdultCovid'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=nrpsynapse.sql.azuresynapse.net;Initial Catalog=nrpdedicated"
		},
		"PuneRainFall_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'PuneRainFall'"
		},
		"RestService1_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'RestService1'"
		},
		"nrpmcapssa-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'nrpmcapssa-WorkspaceDefaultSqlServer'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=tcp:nrpmcapssa.sql.azuresynapse.net,1433;Initial Catalog=@{linkedService().DBName}"
		},
		"nrpsqlpaasSP_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'nrpsqlpaasSP'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=nrpsqlpaasserver.database.windows.net;Initial Catalog=nrpsqlpaas"
		},
		"nrpsqlpaasSP_servicePrincipalKey": {
			"type": "secureString",
			"metadata": "Secure string for 'servicePrincipalKey' of 'nrpsqlpaasSP'"
		},
		"nrpsynapse-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'nrpsynapse-WorkspaceDefaultSqlServer'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=tcp:nrpsynapse.sql.azuresynapse.net,1433;Initial Catalog=@{linkedService().DBName}"
		},
		"nrpsynapsemcaps-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'nrpsynapsemcaps-WorkspaceDefaultSqlServer'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=tcp:nrpsynapsemcaps.sql.azuresynapse.net,1433;Initial Catalog=@{linkedService().DBName}"
		},
		"withnrpnewadls_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'withnrpnewadls'"
		},
		"AzureDataLakeStorage2_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://nitinadls2.dfs.core.windows.net"
		},
		"AzureDataLakeStorage3_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://nrpnewadls.dfs.core.windows.net"
		},
		"AzureDataLakeStorage4_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://nrpnewadls.dfs.core.windows.net/"
		},
		"AzureSqlDatabase1_properties_typeProperties_servicePrincipalId": {
			"type": "string",
			"defaultValue": "e83dbead-4482-47f6-98e7-55f146fe15ad"
		},
		"AzureSqlDatabase1_properties_typeProperties_tenant": {
			"type": "string",
			"defaultValue": "16b3c013-d300-468d-ac64-7eda0820b6d3"
		},
		"BSCC_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://nrpnewadls.dfs.core.windows.net"
		},
		"BSCCAdultCovid_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://nrpnewadls.dfs.core.windows.net"
		},
		"PuneRainFall_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://nrpadls.dfs.core.windows.net"
		},
		"RestService1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://api.smartsheet.com/2.0/sheets/PWmXVc3hCPP9qCqwG9cgV7Vvq64ppwGRWXWpWJP1"
		},
		"RestService1_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "avidunixuser@gmail.com"
		},
		"nrpkeyvault_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://nrpedspkeyvault.vault.azure.net/"
		},
		"nrpmcapssa-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://synapseonly.dfs.core.windows.net"
		},
		"nrpsqlpaasSP_properties_typeProperties_servicePrincipalId": {
			"type": "string",
			"defaultValue": "e83dbead-4482-47f6-98e7-55f146fe15ad"
		},
		"nrpsqlpaasSP_properties_typeProperties_tenant": {
			"type": "string",
			"defaultValue": "16b3c013-d300-468d-ac64-7eda0820b6d3"
		},
		"nrpsynapse-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://nitinadls2.dfs.core.windows.net"
		},
		"nrpsynapsemcaps-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://synapseonly.dfs.core.windows.net"
		},
		"us-decennial-census-zip_sasUri": {
			"type": "secureString",
			"metadata": "Secure string for 'sasUri' of 'us-decennial-census-zip'"
		},
		"withnrpnewadls_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://nrpnewadls.dfs.core.windows.net/"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/CopyDataADLStoSynapse')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "CopyCovidData",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "SqlDWSink",
								"allowCopyCommand": true,
								"copyCommandSettings": {},
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "CovidData",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSynapseAnalyticsTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-03-29T23:50:45Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/CovidData')]",
				"[concat(variables('workspaceId'), '/datasets/AzureSynapseAnalyticsTable1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Flood')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "FloodPrediction",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "Pune Rainfall",
								"type": "NotebookReference"
							},
							"snapshot": true,
							"conf": {
								"spark.dynamicAllocation.enabled": null,
								"spark.dynamicAllocation.minExecutors": null,
								"spark.dynamicAllocation.maxExecutors": null
							},
							"numExecutors": null
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-01-28T19:34:52Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/Pune Rainfall')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Pipeline 1')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "smartsheet",
						"description": "This is a smartsheet REST API call",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://api.smartsheet.com/2.0/sheets/PWmXVc3hCPP9qCqwG9cgV7Vvq64ppwGRWXWpWJP1",
							"connectVia": {
								"referenceName": "AutoResolveIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"method": "GET",
							"headers": {},
							"linkedServices": [
								{
									"referenceName": "RestService1",
									"type": "LinkedServiceReference"
								}
							],
							"authentication": {
								"type": "Basic",
								"username": "avidunixuser@gmail.com",
								"password": {
									"type": "SecureString",
									"value": "**********"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-04-29T22:44:25Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/RestService1')]",
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Pipeline 2')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "adlsloopback",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": true,
							"stagingSettings": {
								"linkedServiceName": {
									"referenceName": "withnrpnewadls",
									"type": "LinkedServiceReference"
								},
								"path": "cdtfa/src"
							},
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Excel1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DelimitedText2",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-08-13T01:00:16Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/Excel1')]",
				"[concat(variables('workspaceId'), '/datasets/DelimitedText2')]",
				"[concat(variables('workspaceId'), '/linkedServices/withnrpnewadls')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureSynapseAnalyticsTable1')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "BSCCDedicatedPoolAdultCovid",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [],
				"typeProperties": {
					"schema": "bscc",
					"table": "coviddata"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/BSCCDedicatedPoolAdultCovid')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CovidData')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "BSCCAdultCovid",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "covid19cases_test.csv",
						"fileSystem": "californiabscc"
					},
					"columnDelimiter": ",",
					"rowDelimiter": "\n",
					"escapeChar": "\"",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/BSCCAdultCovid')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DelimitedText1')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage3",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "TestData_500K_PipeDelimited_UTF8.xls",
						"folderPath": "raw_data",
						"fileSystem": "telework"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "CovidFlag",
						"type": "String"
					},
					{
						"name": "Enabled",
						"type": "String"
					},
					{
						"name": "EmployeeID",
						"type": "String"
					},
					{
						"name": "DomainName",
						"type": "String"
					},
					{
						"name": "eEmployeeID",
						"type": "String"
					},
					{
						"name": "EmpNumber",
						"type": "String"
					},
					{
						"name": "FirstName",
						"type": "String"
					},
					{
						"name": "LastName",
						"type": "String"
					},
					{
						"name": "FullName",
						"type": "String"
					},
					{
						"name": "Employee_Title_Code",
						"type": "String"
					},
					{
						"name": "Title",
						"type": "String"
					},
					{
						"name": "Employee_LACODepartmentCode",
						"type": "String"
					},
					{
						"name": "Employee_LACOBudgetOrgCode",
						"type": "String"
					},
					{
						"name": "Employee_Type",
						"type": "String"
					},
					{
						"name": "Email",
						"type": "String"
					},
					{
						"name": "Supervisor",
						"type": "String"
					},
					{
						"name": "Manager_ID",
						"type": "String"
					},
					{
						"name": "ManagerSamAccountName",
						"type": "String"
					},
					{
						"name": "Manager_Email",
						"type": "String"
					},
					{
						"name": "Manager_LACODepartmentCode",
						"type": "String"
					},
					{
						"name": "Manager_LACOBudgetOrgCode",
						"type": "String"
					},
					{
						"name": "Manager_Title_Code",
						"type": "String"
					},
					{
						"name": "Manager_Desc",
						"type": "String"
					},
					{
						"name": "DateWorked",
						"type": "String"
					},
					{
						"name": "EnteredBy",
						"type": "String"
					},
					{
						"name": "Dept_CD",
						"type": "String"
					},
					{
						"name": "Deparment",
						"type": "String"
					},
					{
						"name": "Dept_Full_Desc",
						"type": "String"
					},
					{
						"name": "Service",
						"type": "String"
					},
					{
						"name": "Branch",
						"type": "String"
					},
					{
						"name": "Division",
						"type": "String"
					},
					{
						"name": "Section",
						"type": "String"
					},
					{
						"name": "TaskID",
						"type": "String"
					},
					{
						"name": "TaskName",
						"type": "String"
					},
					{
						"name": "TaskDescription",
						"type": "String"
					},
					{
						"name": "StartHours",
						"type": "String"
					},
					{
						"name": "EndHours",
						"type": "String"
					},
					{
						"name": "Hours",
						"type": "String"
					},
					{
						"name": "TimeType",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureDataLakeStorage3')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DelimitedText2')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "withnrpnewadls",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "src/6223edb4-9c9f-456d-96af-ee970c8efe89",
						"fileSystem": "cdtfa"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/withnrpnewadls')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Excel1')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "withnrpnewadls",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Sheet1",
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "CDTFA_AdminExpendFy.xlsx",
						"folderPath": "src",
						"fileSystem": "cdtfa"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "Summary of Expenditures (Table 2)",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/withnrpnewadls')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Parquet1')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "withnrpnewadls",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "src/6223edb4-9c9f-456d-96af-ee970c8efe89",
						"fileSystem": "cdtfa"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/withnrpnewadls')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureBlobStorage1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage1_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureDataLakeStorage2')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage2_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorage2_accountKey')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureDataLakeStorage3')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage3_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorage3_accountKey')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureDataLakeStorage4')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage4_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorage4_accountKey')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureSqlDatabase1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabase1_connectionString')]",
					"servicePrincipalId": "[parameters('AzureSqlDatabase1_properties_typeProperties_servicePrincipalId')]",
					"servicePrincipalKey": {
						"type": "SecureString",
						"value": "[parameters('AzureSqlDatabase1_servicePrincipalKey')]"
					},
					"tenant": "[parameters('AzureSqlDatabase1_properties_typeProperties_tenant')]",
					"azureCloudType": "AzurePublic"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/BSCC')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('BSCC_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('BSCC_accountKey')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/BSCCAdultCovid')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('BSCCAdultCovid_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('BSCCAdultCovid_accountKey')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/BSCCDedicatedPoolAdultCovid')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('BSCCDedicatedPoolAdultCovid_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/BSCCPBI')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "PowerBIWorkspace",
				"typeProperties": {
					"workspaceID": "dc4c6e3b-108b-404e-b6e4-e76a4171191d",
					"tenantID": "72f988bf-86f1-41af-91ab-2d7cd011db47"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PuneRainFall')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('PuneRainFall_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('PuneRainFall_accountKey')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/RestService1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "https://app.smartsheet.com/sheets/PWmXVc3hCPP9qCqwG9cgV7Vvq64ppwGRWXWpWJP1\n\n9M24b0ytfFc2E54Ko64gvucJFYcLxeSuNaorD",
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('RestService1_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Basic",
					"userName": "[parameters('RestService1_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('RestService1_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/nrpkeyvault')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('nrpkeyvault_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/nrpmcapssa-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('nrpmcapssa-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/nrpmcapssa-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('nrpmcapssa-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/nrpsqlpaasSP')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "SP client ID - e83dbead-4482-47f6-98e7-55f146fe15ad\nSecret - 9go8Q~G4OFGcqrXBMbS0djlWsiV4w8av5J3Elb1v",
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('nrpsqlpaasSP_connectionString')]",
					"servicePrincipalId": "[parameters('nrpsqlpaasSP_properties_typeProperties_servicePrincipalId')]",
					"servicePrincipalKey": {
						"type": "SecureString",
						"value": "[parameters('nrpsqlpaasSP_servicePrincipalKey')]"
					},
					"tenant": "[parameters('nrpsqlpaasSP_properties_typeProperties_tenant')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/nrpsynapse-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('nrpsynapse-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/nrpsynapse-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('nrpsynapse-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/nrpsynapsemcaps-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('nrpsynapsemcaps-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/nrpsynapsemcaps-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('nrpsynapsemcaps-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/us-decennial-census-zip')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"sasUri": "[parameters('us-decennial-census-zip_sasUri')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/withnrpnewadls')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "This is created for a storage account called nrpnewadls under the LABS resource group",
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('withnrpnewadls_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('withnrpnewadls_accountKey')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PredictFlood')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "This pipeline lerns about the rainfall and predicts possibility of flood situation",
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Flood",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Minute",
						"interval": 1,
						"startTime": "2022-01-28T17:56:00",
						"endTime": "2022-02-03T17:56:00",
						"timeZone": "Pacific Standard Time"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/Flood')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/IntegrationRuntime1')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/nrpmcapsssa')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 10,
							"cleanup": false,
							"customProperties": []
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/LifeExpectancyXGBoostRandomForestRegressor')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Life Expectancy"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "nrpsparkpool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "764a8c48-0d84-41c4-8e86-e93ccaef03f9"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1"
					},
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/0c9ca8c4-a7be-4a66-a8b2-10b180fc0ca9/resourceGroups/LABS/providers/Microsoft.Synapse/workspaces/nrpsynapse/bigDataPools/nrpsparkpool",
						"name": "nrpsparkpool",
						"type": "Spark",
						"endpoint": "https://nrpsynapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/nrpsparkpool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net",
							"authHeader": null
						},
						"sparkVersion": "2.4",
						"nodeCount": 10,
						"cores": 8,
						"memory": 56,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"id": "Q5ZoZ_Lg5y5e"
						},
						"source": [
							"### Hello everyone! Welcome\n",
							"### I have performed EDA and predicted the Life Expectancy according to the features given in the dataset. I wanted to both improve myself and make easier examples for those who are just at the beginning, like me."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.status.busy": "2022-05-03T15:04:09.038961Z",
								"iopub.execute_input": "2022-05-03T15:04:09.039272Z",
								"iopub.status.idle": "2022-05-03T15:04:10.067107Z",
								"shell.execute_reply.started": "2022-05-03T15:04:09.039187Z",
								"shell.execute_reply": "2022-05-03T15:04:10.066434Z"
							},
							"trusted": true,
							"id": "Kj8ca6u75y5m",
							"executionInfo": {
								"status": "ok",
								"timestamp": 1654299080482,
								"user_tz": 420,
								"elapsed": 188,
								"user": {
									"displayName": "Nitin Pathak",
									"userId": "10038392480058271538"
								}
							}
						},
						"source": [
							"import pandas as pd\n",
							"import numpy as np\n",
							"import seaborn as sns\n",
							"import matplotlib.pyplot as plt\n",
							"import warnings\n",
							"warnings.filterwarnings(action=\"ignore\")"
						],
						"outputs": [],
						"execution_count": 220
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# To read data\r\n",
							"import fsspec\r\n",
							"import pandas\r\n",
							"\r\n",
							"adls_account_name = 'nitinadls2' #Provide exact ADLS account name\r\n",
							"adls_account_key = '7xhN9hCHWwtYasQqHPTWck9whdjna/eXSwTmu+EESK5kVAI0OxpO0h3u1AP9MG++0A4ajJPP7RzcO64cn+WzNg==' #Provide exact ADLS account key\r\n",
							"\r\n",
							"fsspec_handle = fsspec.open('abfs://synapse/LifeExpectancyData.csv', account_name=adls_account_name, account_key=adls_account_key)\r\n",
							"\r\n",
							"with fsspec_handle.open() as f:\r\n",
							"    data = pandas.read_csv(f)"
						],
						"outputs": [],
						"execution_count": 221
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.status.busy": "2022-05-03T15:04:16.494622Z",
								"iopub.execute_input": "2022-05-03T15:04:16.495124Z",
								"iopub.status.idle": "2022-05-03T15:04:16.536369Z",
								"shell.execute_reply.started": "2022-05-03T15:04:16.495069Z",
								"shell.execute_reply": "2022-05-03T15:04:16.535745Z"
							},
							"trusted": true,
							"id": "Yi4C0x_s5y5o",
							"executionInfo": {
								"status": "ok",
								"timestamp": 1654299081777,
								"user_tz": 420,
								"elapsed": 168,
								"user": {
									"displayName": "Nitin Pathak",
									"userId": "10038392480058271538"
								}
							}
						},
						"source": [
							"# data = pd.read_csv('LifeExpectancyData.csv')"
						],
						"outputs": [],
						"execution_count": 222
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.status.busy": "2022-05-03T15:04:21.07838Z",
								"iopub.execute_input": "2022-05-03T15:04:21.079023Z",
								"iopub.status.idle": "2022-05-03T15:04:21.083217Z",
								"shell.execute_reply.started": "2022-05-03T15:04:21.078983Z",
								"shell.execute_reply": "2022-05-03T15:04:21.082414Z"
							},
							"trusted": true,
							"id": "QXjDev0V5y5o",
							"executionInfo": {
								"status": "ok",
								"timestamp": 1654299081777,
								"user_tz": 420,
								"elapsed": 12,
								"user": {
									"displayName": "Nitin Pathak",
									"userId": "10038392480058271538"
								}
							}
						},
						"source": [
							"pd.set_option('display.max_columns', None)"
						],
						"outputs": [],
						"execution_count": 223
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.status.busy": "2022-05-03T15:04:21.640756Z",
								"iopub.execute_input": "2022-05-03T15:04:21.64129Z",
								"iopub.status.idle": "2022-05-03T15:04:21.655275Z",
								"shell.execute_reply.started": "2022-05-03T15:04:21.641254Z",
								"shell.execute_reply": "2022-05-03T15:04:21.654739Z"
							},
							"trusted": true,
							"colab": {
								"base_uri": "https://localhost:8080/"
							},
							"id": "Bp5tJtNg5y5p",
							"executionInfo": {
								"status": "ok",
								"timestamp": 1654299081778,
								"user_tz": 420,
								"elapsed": 13,
								"user": {
									"displayName": "Nitin Pathak",
									"userId": "10038392480058271538"
								}
							},
							"outputId": "23322b48-9440-4c3d-ed42-70c617d0631d"
						},
						"source": [
							"data.isna().sum()"
						],
						"outputs": [],
						"execution_count": 224
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"id": "iAG_qdzY5y5q"
						},
						"source": [
							"### Using Interpolation method to deal with the null values"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.status.busy": "2022-05-03T15:06:12.827847Z",
								"iopub.execute_input": "2022-05-03T15:06:12.828576Z",
								"iopub.status.idle": "2022-05-03T15:06:12.83934Z",
								"shell.execute_reply.started": "2022-05-03T15:06:12.828529Z",
								"shell.execute_reply": "2022-05-03T15:06:12.838446Z"
							},
							"trusted": true,
							"id": "kfwPAcQ35y5q",
							"executionInfo": {
								"status": "ok",
								"timestamp": 1654299081779,
								"user_tz": 420,
								"elapsed": 12,
								"user": {
									"displayName": "Nitin Pathak",
									"userId": "10038392480058271538"
								}
							}
						},
						"source": [
							"data1 = data.interpolate(method = 'linear', limit_direction = 'forward')"
						],
						"outputs": [],
						"execution_count": 225
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.status.busy": "2022-05-03T15:06:14.834187Z",
								"iopub.execute_input": "2022-05-03T15:06:14.834619Z",
								"iopub.status.idle": "2022-05-03T15:06:14.849222Z",
								"shell.execute_reply.started": "2022-05-03T15:06:14.834583Z",
								"shell.execute_reply": "2022-05-03T15:06:14.848425Z"
							},
							"trusted": true,
							"colab": {
								"base_uri": "https://localhost:8080/"
							},
							"id": "yqr9Rzco5y5r",
							"executionInfo": {
								"status": "ok",
								"timestamp": 1654299081779,
								"user_tz": 420,
								"elapsed": 11,
								"user": {
									"displayName": "Nitin Pathak",
									"userId": "10038392480058271538"
								}
							},
							"outputId": "1ed9e92c-9af2-414d-c809-f416d11bf4ba"
						},
						"source": [
							"data1.isna().sum()"
						],
						"outputs": [],
						"execution_count": 226
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.status.busy": "2022-05-03T15:06:19.445153Z",
								"iopub.execute_input": "2022-05-03T15:06:19.446903Z",
								"iopub.status.idle": "2022-05-03T15:06:19.451875Z",
								"shell.execute_reply.started": "2022-05-03T15:06:19.446846Z",
								"shell.execute_reply": "2022-05-03T15:06:19.451027Z"
							},
							"trusted": true,
							"id": "KKlJ-w5M5y5s",
							"executionInfo": {
								"status": "ok",
								"timestamp": 1654299081780,
								"user_tz": 420,
								"elapsed": 10,
								"user": {
									"displayName": "Nitin Pathak",
									"userId": "10038392480058271538"
								}
							}
						},
						"source": [
							"data1.columns = data1.columns.str.replace(' ','_')"
						],
						"outputs": [],
						"execution_count": 227
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.status.busy": "2022-05-03T15:06:20.44191Z",
								"iopub.execute_input": "2022-05-03T15:06:20.442543Z",
								"iopub.status.idle": "2022-05-03T15:06:20.45021Z",
								"shell.execute_reply.started": "2022-05-03T15:06:20.442494Z",
								"shell.execute_reply": "2022-05-03T15:06:20.449461Z"
							},
							"trusted": true,
							"colab": {
								"base_uri": "https://localhost:8080/"
							},
							"id": "VL42vOaK5y5s",
							"executionInfo": {
								"status": "ok",
								"timestamp": 1654299081780,
								"user_tz": 420,
								"elapsed": 10,
								"user": {
									"displayName": "Nitin Pathak",
									"userId": "10038392480058271538"
								}
							},
							"outputId": "8c16a68b-a37c-48a3-f0ed-7051d0ffd991"
						},
						"source": [
							"data1.columns"
						],
						"outputs": [],
						"execution_count": 228
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.status.busy": "2022-05-03T15:06:23.91161Z",
								"iopub.execute_input": "2022-05-03T15:06:23.912146Z",
								"iopub.status.idle": "2022-05-03T15:06:23.919968Z",
								"shell.execute_reply.started": "2022-05-03T15:06:23.912112Z",
								"shell.execute_reply": "2022-05-03T15:06:23.917899Z"
							},
							"trusted": true,
							"id": "k2_8wWjC5y5t",
							"executionInfo": {
								"status": "ok",
								"timestamp": 1654299081967,
								"user_tz": 420,
								"elapsed": 194,
								"user": {
									"displayName": "Nitin Pathak",
									"userId": "10038392480058271538"
								}
							}
						},
						"source": [
							"data1 = data1.drop(['Country'], axis = 1)"
						],
						"outputs": [],
						"execution_count": 229
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"id": "qTciATor5y5u"
						},
						"source": [
							"### Changing the categories to binary values"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.status.busy": "2022-05-03T15:06:36.105419Z",
								"iopub.execute_input": "2022-05-03T15:06:36.105704Z",
								"iopub.status.idle": "2022-05-03T15:06:36.113934Z",
								"shell.execute_reply.started": "2022-05-03T15:06:36.105658Z",
								"shell.execute_reply": "2022-05-03T15:06:36.112739Z"
							},
							"trusted": true,
							"id": "o-pn9Ibu5y5u",
							"executionInfo": {
								"status": "ok",
								"timestamp": 1654299081969,
								"user_tz": 420,
								"elapsed": 18,
								"user": {
									"displayName": "Nitin Pathak",
									"userId": "10038392480058271538"
								}
							}
						},
						"source": [
							"data1.Status = data1.Status.map({'Developing':0, 'Developed': 1})"
						],
						"outputs": [],
						"execution_count": 230
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.status.busy": "2022-05-03T15:06:36.604808Z",
								"iopub.execute_input": "2022-05-03T15:06:36.605349Z",
								"iopub.status.idle": "2022-05-03T15:06:36.637836Z",
								"shell.execute_reply.started": "2022-05-03T15:06:36.605314Z",
								"shell.execute_reply": "2022-05-03T15:06:36.637043Z"
							},
							"trusted": true,
							"colab": {
								"base_uri": "https://localhost:8080/",
								"height": 287
							},
							"id": "PM5PqPbt5y5u",
							"executionInfo": {
								"status": "ok",
								"timestamp": 1654299081971,
								"user_tz": 420,
								"elapsed": 19,
								"user": {
									"displayName": "Nitin Pathak",
									"userId": "10038392480058271538"
								}
							},
							"outputId": "8b7c4dc1-75cd-479d-d864-821980692c85"
						},
						"source": [
							"data1.head()"
						],
						"outputs": [],
						"execution_count": 231
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.status.busy": "2022-05-03T15:06:39.942205Z",
								"iopub.execute_input": "2022-05-03T15:06:39.942494Z",
								"iopub.status.idle": "2022-05-03T15:06:39.948495Z",
								"shell.execute_reply.started": "2022-05-03T15:06:39.94246Z",
								"shell.execute_reply": "2022-05-03T15:06:39.947723Z"
							},
							"trusted": true,
							"id": "FsRbM9f05y5v",
							"executionInfo": {
								"status": "ok",
								"timestamp": 1654299081974,
								"user_tz": 420,
								"elapsed": 17,
								"user": {
									"displayName": "Nitin Pathak",
									"userId": "10038392480058271538"
								}
							}
						},
						"source": [
							"columns = {'Year':1,'Life_expectancy_':2,'Adult_Mortality':3,'infant_deaths':4,'Alcohol':5,'percentage_expenditure':6,\n",
							"            'Hepatitis_B':7,'Measles_':8,'_BMI_':9,'under-five_deaths_':10,'Polio':11,'Total_expenditure':12,'Diphtheria_':13,'_HIV/AIDS':14,\n",
							"            'GDP':15,'Population':16,'_thinness__1-19_years':17,'_thinness_5-9_years':18,'Income_composition_of_resources':19,'Schooling':20}"
						],
						"outputs": [],
						"execution_count": 232
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.status.busy": "2022-05-03T15:07:25.531883Z",
								"iopub.execute_input": "2022-05-03T15:07:25.532172Z",
								"iopub.status.idle": "2022-05-03T15:07:27.703892Z",
								"shell.execute_reply.started": "2022-05-03T15:07:25.532142Z",
								"shell.execute_reply": "2022-05-03T15:07:27.702957Z"
							},
							"trusted": true,
							"colab": {
								"base_uri": "https://localhost:8080/",
								"height": 1000
							},
							"id": "tggJ3yra5y5v",
							"executionInfo": {
								"status": "ok",
								"timestamp": 1654299084533,
								"user_tz": 420,
								"elapsed": 2576,
								"user": {
									"displayName": "Nitin Pathak",
									"userId": "10038392480058271538"
								}
							},
							"outputId": "57aeabd0-e414-4fd3-dbdf-13746d43fa1f"
						},
						"source": [
							"# let's see which columns have outliers\n",
							"plt.figure(figsize = (20,30))\n",
							"for var, i in columns.items():\n",
							"    plt.subplot(5,4,i)\n",
							"    plt.boxplot(data1[var], whis = 1.5)\n",
							"    plt.title(var)\n",
							"plt.show()"
						],
						"outputs": [],
						"execution_count": 233
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"id": "VrNPMgCy5y5v"
						},
						"source": [
							"### Looks like we have a lot of outliers and need to deal with it!"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.status.busy": "2022-05-03T15:08:05.853856Z",
								"iopub.execute_input": "2022-05-03T15:08:05.854158Z",
								"iopub.status.idle": "2022-05-03T15:08:05.861429Z",
								"shell.execute_reply.started": "2022-05-03T15:08:05.854125Z",
								"shell.execute_reply": "2022-05-03T15:08:05.860419Z"
							},
							"trusted": true,
							"colab": {
								"base_uri": "https://localhost:8080/"
							},
							"id": "4-663HnB5y5w",
							"executionInfo": {
								"status": "ok",
								"timestamp": 1654299084536,
								"user_tz": 420,
								"elapsed": 13,
								"user": {
									"displayName": "Nitin Pathak",
									"userId": "10038392480058271538"
								}
							},
							"outputId": "09371132-49ab-49c1-c7a2-8643da2204c1"
						},
						"source": [
							"data1.columns"
						],
						"outputs": [],
						"execution_count": 234
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.status.busy": "2022-05-03T15:08:30.15354Z",
								"iopub.execute_input": "2022-05-03T15:08:30.153962Z",
								"iopub.status.idle": "2022-05-03T15:08:30.308123Z",
								"shell.execute_reply.started": "2022-05-03T15:08:30.153931Z",
								"shell.execute_reply": "2022-05-03T15:08:30.307161Z"
							},
							"trusted": true,
							"colab": {
								"base_uri": "https://localhost:8080/",
								"height": 335
							},
							"id": "UUg09m6p5y5w",
							"executionInfo": {
								"status": "ok",
								"timestamp": 1654299084836,
								"user_tz": 420,
								"elapsed": 309,
								"user": {
									"displayName": "Nitin Pathak",
									"userId": "10038392480058271538"
								}
							},
							"outputId": "adc1b43a-25fc-4993-fd8f-aea536d54176"
						},
						"source": [
							"# all columns with outliers - \n",
							"sns.boxplot(data1.Life_expectancy_)\n",
							"plt.show()"
						],
						"outputs": [],
						"execution_count": 235
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"id": "wi3bDGuN5y5w"
						},
						"source": [
							"### Let's use Cube root Transformation method to deal with outliers."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.status.busy": "2022-05-03T15:12:05.943577Z",
								"iopub.execute_input": "2022-05-03T15:12:05.943876Z",
								"iopub.status.idle": "2022-05-03T15:12:06.330831Z",
								"shell.execute_reply.started": "2022-05-03T15:12:05.94384Z",
								"shell.execute_reply": "2022-05-03T15:12:06.329991Z"
							},
							"trusted": true,
							"colab": {
								"base_uri": "https://localhost:8080/",
								"height": 545
							},
							"id": "ElENbx1t5y5x",
							"executionInfo": {
								"status": "ok",
								"timestamp": 1654299085067,
								"user_tz": 420,
								"elapsed": 241,
								"user": {
									"displayName": "Nitin Pathak",
									"userId": "10038392480058271538"
								}
							},
							"outputId": "d52fcbea-7e1a-4c5b-e32b-9a085a9e8109"
						},
						"source": [
							"#Cube root transformation\n",
							"plt.hist(data1['Life_expectancy_'])\n",
							"plt.title('before transformation')\n",
							"plt.show()\n",
							"data1['Life_expectancy_'] = (data1['Life_expectancy_']**(1/3))\n",
							"plt.hist(data1['Life_expectancy_'])\n",
							"plt.title('after transformation')\n",
							"plt.show()"
						],
						"outputs": [],
						"execution_count": 236
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.status.busy": "2022-05-03T15:12:10.955311Z",
								"iopub.execute_input": "2022-05-03T15:12:10.956003Z",
								"iopub.status.idle": "2022-05-03T15:12:11.110301Z",
								"shell.execute_reply.started": "2022-05-03T15:12:10.955959Z",
								"shell.execute_reply": "2022-05-03T15:12:11.10948Z"
							},
							"trusted": true,
							"colab": {
								"base_uri": "https://localhost:8080/",
								"height": 335
							},
							"id": "jwWkw8_l5y5x",
							"executionInfo": {
								"status": "ok",
								"timestamp": 1654299085068,
								"user_tz": 420,
								"elapsed": 9,
								"user": {
									"displayName": "Nitin Pathak",
									"userId": "10038392480058271538"
								}
							},
							"outputId": "e3b4e4d0-01f5-45f2-8dc4-5c5956f46247"
						},
						"source": [
							"sns.boxplot(data1.Life_expectancy_)\n",
							"plt.show()"
						],
						"outputs": [],
						"execution_count": 237
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"id": "-8Fu52lf5y5x"
						},
						"source": [
							"### This method does not eliminate the outliers completely but improves or reduces the outliers indeed."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.status.busy": "2022-05-03T15:13:14.963282Z",
								"iopub.execute_input": "2022-05-03T15:13:14.963573Z",
								"iopub.status.idle": "2022-05-03T15:13:15.28026Z",
								"shell.execute_reply.started": "2022-05-03T15:13:14.963544Z",
								"shell.execute_reply": "2022-05-03T15:13:15.279429Z"
							},
							"trusted": true,
							"colab": {
								"base_uri": "https://localhost:8080/",
								"height": 545
							},
							"id": "tCoPuRB_5y5x",
							"executionInfo": {
								"status": "ok",
								"timestamp": 1654299085560,
								"user_tz": 420,
								"elapsed": 499,
								"user": {
									"displayName": "Nitin Pathak",
									"userId": "10038392480058271538"
								}
							},
							"outputId": "2e4474ed-79b9-4452-85b8-103b7a1cd43f"
						},
						"source": [
							"# for Adult_Mortality\n",
							"plt.hist(data1['Adult_Mortality'])\n",
							"plt.title('before transf')\n",
							"plt.show()\n",
							"data1['Adult_Mortality'] = (data1.Adult_Mortality**(1/3))\n",
							"plt.hist(data1['Adult_Mortality'])\n",
							"plt.title('after transf')\n",
							"plt.show()"
						],
						"outputs": [],
						"execution_count": 238
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.status.busy": "2022-05-03T15:13:15.357235Z",
								"iopub.execute_input": "2022-05-03T15:13:15.357767Z",
								"iopub.status.idle": "2022-05-03T15:13:15.521304Z",
								"shell.execute_reply.started": "2022-05-03T15:13:15.357729Z",
								"shell.execute_reply": "2022-05-03T15:13:15.52048Z"
							},
							"trusted": true,
							"colab": {
								"base_uri": "https://localhost:8080/",
								"height": 335
							},
							"id": "vCrA8YrJ5y5y",
							"executionInfo": {
								"status": "ok",
								"timestamp": 1654299085760,
								"user_tz": 420,
								"elapsed": 205,
								"user": {
									"displayName": "Nitin Pathak",
									"userId": "10038392480058271538"
								}
							},
							"outputId": "29d40f00-4d32-4af1-b3af-3f52527506a3"
						},
						"source": [
							"sns.boxplot(data1['Adult_Mortality'])\n",
							"plt.show()"
						],
						"outputs": [],
						"execution_count": 239
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.status.busy": "2022-05-03T15:13:19.792646Z",
								"iopub.execute_input": "2022-05-03T15:13:19.793537Z",
								"iopub.status.idle": "2022-05-03T15:13:20.183314Z",
								"shell.execute_reply.started": "2022-05-03T15:13:19.793488Z",
								"shell.execute_reply": "2022-05-03T15:13:20.181832Z"
							},
							"trusted": true,
							"colab": {
								"base_uri": "https://localhost:8080/",
								"height": 545
							},
							"id": "QV-sRsq45y5y",
							"executionInfo": {
								"status": "ok",
								"timestamp": 1654299086096,
								"user_tz": 420,
								"elapsed": 341,
								"user": {
									"displayName": "Nitin Pathak",
									"userId": "10038392480058271538"
								}
							},
							"outputId": "06547133-4e53-4ed2-fbf7-ca1d9e47701d"
						},
						"source": [
							"plt.hist(data1['infant_deaths'])\n",
							"plt.title('before transf')\n",
							"plt.show()\n",
							"data1['infant_deaths'] = (data1['infant_deaths']**(1/3))\n",
							"plt.hist(data1['infant_deaths'])\n",
							"plt.title('after transf')\n",
							"plt.show()"
						],
						"outputs": [],
						"execution_count": 240
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.status.busy": "2022-05-03T15:13:45.21123Z",
								"iopub.execute_input": "2022-05-03T15:13:45.211536Z",
								"iopub.status.idle": "2022-05-03T15:13:45.591838Z",
								"shell.execute_reply.started": "2022-05-03T15:13:45.211502Z",
								"shell.execute_reply": "2022-05-03T15:13:45.591054Z"
							},
							"trusted": true,
							"colab": {
								"base_uri": "https://localhost:8080/",
								"height": 545
							},
							"id": "GkJUL0L25y5y",
							"executionInfo": {
								"status": "ok",
								"timestamp": 1654299086588,
								"user_tz": 420,
								"elapsed": 496,
								"user": {
									"displayName": "Nitin Pathak",
									"userId": "10038392480058271538"
								}
							},
							"outputId": "bc86a674-41de-4d12-8375-d5dcabd6692c"
						},
						"source": [
							"\n",
							"plt.hist(data1['percentage_expenditure'])\n",
							"plt.title('before transf')\n",
							"plt.show()\n",
							"data1['percentage_expenditure'] = (data1['percentage_expenditure']**(1/3))\n",
							"plt.hist(data1['percentage_expenditure'])\n",
							"plt.title('after transf')\n",
							"plt.show()\n",
							""
						],
						"outputs": [],
						"execution_count": 241
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.status.busy": "2022-05-03T15:13:48.763736Z",
								"iopub.execute_input": "2022-05-03T15:13:48.764654Z",
								"iopub.status.idle": "2022-05-03T15:13:49.202158Z",
								"shell.execute_reply.started": "2022-05-03T15:13:48.764605Z",
								"shell.execute_reply": "2022-05-03T15:13:49.201014Z"
							},
							"trusted": true,
							"colab": {
								"base_uri": "https://localhost:8080/",
								"height": 545
							},
							"id": "C_I1J0PG5y5y",
							"executionInfo": {
								"status": "ok",
								"timestamp": 1654299086806,
								"user_tz": 420,
								"elapsed": 228,
								"user": {
									"displayName": "Nitin Pathak",
									"userId": "10038392480058271538"
								}
							},
							"outputId": "b40f71d3-5ab0-4139-8785-3fd8db282100"
						},
						"source": [
							"plt.hist(data1['Hepatitis_B'])\n",
							"plt.title('before transf')\n",
							"plt.show()\n",
							"data1['Hepatitis_B'] = (data1['Hepatitis_B']**(1/3))\n",
							"plt.hist(data1['Hepatitis_B'])\n",
							"plt.title('after transf')\n",
							"plt.show()"
						],
						"outputs": [],
						"execution_count": 242
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.status.busy": "2022-05-03T15:13:50.482351Z",
								"iopub.execute_input": "2022-05-03T15:13:50.482649Z",
								"iopub.status.idle": "2022-05-03T15:13:50.900853Z",
								"shell.execute_reply.started": "2022-05-03T15:13:50.482615Z",
								"shell.execute_reply": "2022-05-03T15:13:50.899872Z"
							},
							"trusted": true,
							"colab": {
								"base_uri": "https://localhost:8080/",
								"height": 545
							},
							"id": "-u7sxbOT5y5z",
							"executionInfo": {
								"status": "ok",
								"timestamp": 1654299087115,
								"user_tz": 420,
								"elapsed": 314,
								"user": {
									"displayName": "Nitin Pathak",
									"userId": "10038392480058271538"
								}
							},
							"outputId": "310a8a4e-abb1-431b-aecd-20505f79d1b2"
						},
						"source": [
							"plt.hist(data1['Measles_'])\n",
							"plt.title('before transf')\n",
							"plt.show()\n",
							"data1['Measles_'] = (data1['Measles_']**(1/3))\n",
							"plt.hist(data1['Measles_'])\n",
							"plt.title('after transf')\n",
							"plt.show()"
						],
						"outputs": [],
						"execution_count": 243
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.status.busy": "2022-05-03T15:13:54.169577Z",
								"iopub.execute_input": "2022-05-03T15:13:54.169844Z",
								"iopub.status.idle": "2022-05-03T15:13:54.543373Z",
								"shell.execute_reply.started": "2022-05-03T15:13:54.169817Z",
								"shell.execute_reply": "2022-05-03T15:13:54.542652Z"
							},
							"trusted": true,
							"colab": {
								"base_uri": "https://localhost:8080/",
								"height": 335
							},
							"id": "4FxXKuZy5y5z",
							"executionInfo": {
								"status": "ok",
								"timestamp": 1654299087354,
								"user_tz": 420,
								"elapsed": 244,
								"user": {
									"displayName": "Nitin Pathak",
									"userId": "10038392480058271538"
								}
							},
							"outputId": "d505fb7d-ab67-4969-ea63-c238d9ba0a0b"
						},
						"source": [
							"sns.boxplot(data1['Measles_'])\n",
							"plt.show()"
						],
						"outputs": [],
						"execution_count": 244
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.status.busy": "2022-05-03T15:13:58.994149Z",
								"iopub.execute_input": "2022-05-03T15:13:58.994944Z",
								"iopub.status.idle": "2022-05-03T15:13:59.375533Z",
								"shell.execute_reply.started": "2022-05-03T15:13:58.994902Z",
								"shell.execute_reply": "2022-05-03T15:13:59.374699Z"
							},
							"trusted": true,
							"colab": {
								"base_uri": "https://localhost:8080/",
								"height": 545
							},
							"id": "06aVjnFO5y5z",
							"executionInfo": {
								"status": "ok",
								"timestamp": 1654299087883,
								"user_tz": 420,
								"elapsed": 536,
								"user": {
									"displayName": "Nitin Pathak",
									"userId": "10038392480058271538"
								}
							},
							"outputId": "6f3dc3f2-035a-4cad-a6dd-194da8edc85d"
						},
						"source": [
							"\n",
							"plt.hist(data1['under-five_deaths_'])\n",
							"plt.title('before transf')\n",
							"plt.show()\n",
							"data1['under-five_deaths_'] = (data1['under-five_deaths_']**(1/3))\n",
							"plt.hist(data1['under-five_deaths_'])\n",
							"plt.title('after transf')\n",
							"plt.show()"
						],
						"outputs": [],
						"execution_count": 245
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.status.busy": "2022-05-03T15:14:04.012176Z",
								"iopub.execute_input": "2022-05-03T15:14:04.012725Z",
								"iopub.status.idle": "2022-05-03T15:14:04.167833Z",
								"shell.execute_reply.started": "2022-05-03T15:14:04.012672Z",
								"shell.execute_reply": "2022-05-03T15:14:04.167043Z"
							},
							"trusted": true,
							"colab": {
								"base_uri": "https://localhost:8080/",
								"height": 335
							},
							"id": "G6u0P8mm5y5z",
							"executionInfo": {
								"status": "ok",
								"timestamp": 1654299088163,
								"user_tz": 420,
								"elapsed": 283,
								"user": {
									"displayName": "Nitin Pathak",
									"userId": "10038392480058271538"
								}
							},
							"outputId": "37e90289-0680-4c4f-b811-52e6c0d487bf"
						},
						"source": [
							"sns.boxplot(data1['under-five_deaths_'])\n",
							"plt.show()"
						],
						"outputs": [],
						"execution_count": 246
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.status.busy": "2022-05-03T15:14:04.49235Z",
								"iopub.execute_input": "2022-05-03T15:14:04.493107Z",
								"iopub.status.idle": "2022-05-03T15:14:04.888995Z",
								"shell.execute_reply.started": "2022-05-03T15:14:04.493061Z",
								"shell.execute_reply": "2022-05-03T15:14:04.888216Z"
							},
							"trusted": true,
							"colab": {
								"base_uri": "https://localhost:8080/",
								"height": 545
							},
							"id": "IG2ou-vM5y5z",
							"executionInfo": {
								"status": "ok",
								"timestamp": 1654299088330,
								"user_tz": 420,
								"elapsed": 177,
								"user": {
									"displayName": "Nitin Pathak",
									"userId": "10038392480058271538"
								}
							},
							"outputId": "5d35778a-a7bb-420f-cedc-bd39d6061a33"
						},
						"source": [
							"plt.hist(data1['Polio'])\n",
							"plt.title('before transf')\n",
							"plt.show()\n",
							"data1['Polio'] = (data1['Polio']**(1/3))\n",
							"plt.hist(data1['Polio'])\n",
							"plt.title('after transf')\n",
							"plt.show()"
						],
						"outputs": [],
						"execution_count": 247
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.status.busy": "2022-05-03T15:14:12.52298Z",
								"iopub.execute_input": "2022-05-03T15:14:12.523856Z",
								"iopub.status.idle": "2022-05-03T15:14:12.828619Z",
								"shell.execute_reply.started": "2022-05-03T15:14:12.523815Z",
								"shell.execute_reply": "2022-05-03T15:14:12.827841Z"
							},
							"trusted": true,
							"colab": {
								"base_uri": "https://localhost:8080/",
								"height": 545
							},
							"id": "vjyWD-D85y50",
							"executionInfo": {
								"status": "ok",
								"timestamp": 1654299088815,
								"user_tz": 420,
								"elapsed": 487,
								"user": {
									"displayName": "Nitin Pathak",
									"userId": "10038392480058271538"
								}
							},
							"outputId": "22ed0f76-c0c6-4f04-8559-048c9a8ecaae"
						},
						"source": [
							"plt.hist(data1['Total_expenditure'])\n",
							"plt.title('before transf')\n",
							"plt.show()\n",
							"data1['Total_expenditure'] = (data1['Total_expenditure']**(1/3))\n",
							"plt.hist(data1['Total_expenditure'])\n",
							"plt.title('after transf')\n",
							"plt.show()"
						],
						"outputs": [],
						"execution_count": 248
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.status.busy": "2022-05-03T15:14:12.928623Z",
								"iopub.execute_input": "2022-05-03T15:14:12.929477Z",
								"iopub.status.idle": "2022-05-03T15:14:13.204734Z",
								"shell.execute_reply.started": "2022-05-03T15:14:12.929421Z",
								"shell.execute_reply": "2022-05-03T15:14:13.203737Z"
							},
							"trusted": true,
							"colab": {
								"base_uri": "https://localhost:8080/",
								"height": 545
							},
							"id": "Lo9lbCT95y50",
							"executionInfo": {
								"status": "ok",
								"timestamp": 1654299089103,
								"user_tz": 420,
								"elapsed": 295,
								"user": {
									"displayName": "Nitin Pathak",
									"userId": "10038392480058271538"
								}
							},
							"outputId": "02bf09df-fe0e-485b-d467-465cadfe0bf1"
						},
						"source": [
							"plt.hist(data1['Diphtheria_'])\n",
							"plt.title('before transf')\n",
							"plt.show()\n",
							"data1['Diphtheria_'] = (data1['Diphtheria_']**(1/3))\n",
							"plt.hist(data1['Diphtheria_'])\n",
							"plt.title('after transf')\n",
							"plt.show()"
						],
						"outputs": [],
						"execution_count": 249
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.status.busy": "2022-05-03T15:14:17.021756Z",
								"iopub.execute_input": "2022-05-03T15:14:17.022334Z",
								"iopub.status.idle": "2022-05-03T15:14:17.329772Z",
								"shell.execute_reply.started": "2022-05-03T15:14:17.022296Z",
								"shell.execute_reply": "2022-05-03T15:14:17.328857Z"
							},
							"trusted": true,
							"colab": {
								"base_uri": "https://localhost:8080/",
								"height": 545
							},
							"id": "sLuwVo9p5y50",
							"executionInfo": {
								"status": "ok",
								"timestamp": 1654299089549,
								"user_tz": 420,
								"elapsed": 452,
								"user": {
									"displayName": "Nitin Pathak",
									"userId": "10038392480058271538"
								}
							},
							"outputId": "99d4dae3-e29c-40cc-a714-02fd30f917ad"
						},
						"source": [
							"plt.hist(data1['_HIV/AIDS'])\n",
							"plt.title('before transf')\n",
							"plt.show()\n",
							"data1['_HIV/AIDS'] = (data1['_HIV/AIDS']**(1/3))\n",
							"plt.hist(data1['_HIV/AIDS'])\n",
							"plt.title('after transf')\n",
							"plt.show()"
						],
						"outputs": [],
						"execution_count": 250
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.status.busy": "2022-05-03T15:14:17.50372Z",
								"iopub.execute_input": "2022-05-03T15:14:17.504386Z",
								"iopub.status.idle": "2022-05-03T15:14:17.802191Z",
								"shell.execute_reply.started": "2022-05-03T15:14:17.504302Z",
								"shell.execute_reply": "2022-05-03T15:14:17.801265Z"
							},
							"trusted": true,
							"colab": {
								"base_uri": "https://localhost:8080/",
								"height": 545
							},
							"id": "2w6fxOoT5y50",
							"executionInfo": {
								"status": "ok",
								"timestamp": 1654299089942,
								"user_tz": 420,
								"elapsed": 400,
								"user": {
									"displayName": "Nitin Pathak",
									"userId": "10038392480058271538"
								}
							},
							"outputId": "d03ae8f9-ab66-42c0-ffe7-578cf8a847cc"
						},
						"source": [
							"plt.hist(data1['GDP'])\n",
							"plt.title('before transf')\n",
							"plt.show()\n",
							"data1['GDP'] = (data1['GDP']**(1/3))\n",
							"plt.hist(data1['GDP'])\n",
							"plt.title('after transf')\n",
							"plt.show()"
						],
						"outputs": [],
						"execution_count": 251
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.status.busy": "2022-05-03T15:14:21.85725Z",
								"iopub.execute_input": "2022-05-03T15:14:21.857538Z",
								"iopub.status.idle": "2022-05-03T15:14:22.143803Z",
								"shell.execute_reply.started": "2022-05-03T15:14:21.857505Z",
								"shell.execute_reply": "2022-05-03T15:14:22.143158Z"
							},
							"trusted": true,
							"colab": {
								"base_uri": "https://localhost:8080/",
								"height": 558
							},
							"id": "lOxt2NQW5y50",
							"executionInfo": {
								"status": "ok",
								"timestamp": 1654299090354,
								"user_tz": 420,
								"elapsed": 417,
								"user": {
									"displayName": "Nitin Pathak",
									"userId": "10038392480058271538"
								}
							},
							"outputId": "4cfa4e8e-633a-420e-cb3d-63fa58ca9a9d"
						},
						"source": [
							"plt.hist(data1['Population'])\n",
							"plt.title('before transf')\n",
							"plt.show()\n",
							"data1['Population'] = (data1['Population']**(1/3))\n",
							"plt.hist(data1['Population'])\n",
							"plt.title('after transf')\n",
							"plt.show()"
						],
						"outputs": [],
						"execution_count": 252
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.status.busy": "2022-05-03T15:14:22.204164Z",
								"iopub.execute_input": "2022-05-03T15:14:22.204606Z",
								"iopub.status.idle": "2022-05-03T15:14:22.481636Z",
								"shell.execute_reply.started": "2022-05-03T15:14:22.204566Z",
								"shell.execute_reply": "2022-05-03T15:14:22.480662Z"
							},
							"trusted": true,
							"colab": {
								"base_uri": "https://localhost:8080/",
								"height": 545
							},
							"id": "B0WMouRN5y51",
							"executionInfo": {
								"status": "ok",
								"timestamp": 1654299090566,
								"user_tz": 420,
								"elapsed": 219,
								"user": {
									"displayName": "Nitin Pathak",
									"userId": "10038392480058271538"
								}
							},
							"outputId": "63b17090-1410-4084-d7a9-869df046e56a"
						},
						"source": [
							"plt.hist(data1['_thinness__1-19_years'])\n",
							"plt.title('before transf')\n",
							"plt.show()\n",
							"data1['_thinness__1-19_years'] = (data1['_thinness__1-19_years']**(1/3))\n",
							"plt.hist(data1['_thinness__1-19_years'])\n",
							"plt.title('after transf')\n",
							"plt.show()"
						],
						"outputs": [],
						"execution_count": 253
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.status.busy": "2022-05-03T15:14:26.293388Z",
								"iopub.execute_input": "2022-05-03T15:14:26.293675Z",
								"iopub.status.idle": "2022-05-03T15:14:26.758747Z",
								"shell.execute_reply.started": "2022-05-03T15:14:26.293645Z",
								"shell.execute_reply": "2022-05-03T15:14:26.757737Z"
							},
							"trusted": true,
							"colab": {
								"base_uri": "https://localhost:8080/",
								"height": 545
							},
							"id": "Qxb-h6ae5y51",
							"executionInfo": {
								"status": "ok",
								"timestamp": 1654299090896,
								"user_tz": 420,
								"elapsed": 334,
								"user": {
									"displayName": "Nitin Pathak",
									"userId": "10038392480058271538"
								}
							},
							"outputId": "0a1dd916-3af1-4f51-d493-44b30d3ee0e0"
						},
						"source": [
							"plt.hist(data1['_thinness_5-9_years'])\n",
							"plt.title('before transf')\n",
							"plt.show()\n",
							"data1['_thinness_5-9_years'] = (data1['_thinness_5-9_years']**(1/3))\n",
							"plt.hist(data1['_thinness_5-9_years'])\n",
							"plt.title('after transf')\n",
							"plt.show()"
						],
						"outputs": [],
						"execution_count": 254
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.status.busy": "2022-05-03T15:14:26.760666Z",
								"iopub.execute_input": "2022-05-03T15:14:26.761271Z",
								"iopub.status.idle": "2022-05-03T15:14:28.663478Z",
								"shell.execute_reply.started": "2022-05-03T15:14:26.761221Z",
								"shell.execute_reply": "2022-05-03T15:14:28.662471Z"
							},
							"trusted": true,
							"colab": {
								"base_uri": "https://localhost:8080/",
								"height": 1000
							},
							"id": "B0TOnYjU5y51",
							"executionInfo": {
								"status": "ok",
								"timestamp": 1654299093560,
								"user_tz": 420,
								"elapsed": 2668,
								"user": {
									"displayName": "Nitin Pathak",
									"userId": "10038392480058271538"
								}
							},
							"outputId": "11f93667-5d94-458d-d2e0-c5052d63a3b5"
						},
						"source": [
							"plt.figure(figsize = (20,30))\n",
							"for var, i in columns.items():\n",
							"    plt.subplot(5,4,i)\n",
							"    plt.boxplot(data1[var])\n",
							"    plt.title(var)\n",
							"plt.show()"
						],
						"outputs": [],
						"execution_count": 255
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"id": "1yUw1zYG5y51"
						},
						"source": [
							"### There is definitely an improvement and the number of outliers have reduced significantly!"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.status.busy": "2022-05-03T15:16:32.961136Z",
								"iopub.execute_input": "2022-05-03T15:16:32.96143Z",
								"iopub.status.idle": "2022-05-03T15:16:32.988637Z",
								"shell.execute_reply.started": "2022-05-03T15:16:32.961402Z",
								"shell.execute_reply": "2022-05-03T15:16:32.98787Z"
							},
							"trusted": true,
							"colab": {
								"base_uri": "https://localhost:8080/",
								"height": 287
							},
							"id": "67WnAMQU5y51",
							"executionInfo": {
								"status": "ok",
								"timestamp": 1654299093564,
								"user_tz": 420,
								"elapsed": 24,
								"user": {
									"displayName": "Nitin Pathak",
									"userId": "10038392480058271538"
								}
							},
							"outputId": "041769f9-2fc7-4f59-af41-212095394faf"
						},
						"source": [
							"data1.head()"
						],
						"outputs": [],
						"execution_count": 256
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.status.busy": "2022-05-03T15:16:34.448873Z",
								"iopub.execute_input": "2022-05-03T15:16:34.449501Z",
								"iopub.status.idle": "2022-05-03T15:16:34.456075Z",
								"shell.execute_reply.started": "2022-05-03T15:16:34.449466Z",
								"shell.execute_reply": "2022-05-03T15:16:34.45529Z"
							},
							"trusted": true,
							"id": "IfyKp0BQ5y51",
							"executionInfo": {
								"status": "ok",
								"timestamp": 1654299093566,
								"user_tz": 420,
								"elapsed": 22,
								"user": {
									"displayName": "Nitin Pathak",
									"userId": "10038392480058271538"
								}
							}
						},
						"source": [
							"X = data1.drop(['Life_expectancy_'], axis= 1)\n",
							"y = data1['Life_expectancy_']"
						],
						"outputs": [],
						"execution_count": 257
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.status.busy": "2022-05-03T15:16:39.447733Z",
								"iopub.execute_input": "2022-05-03T15:16:39.448141Z",
								"iopub.status.idle": "2022-05-03T15:16:39.470664Z",
								"shell.execute_reply.started": "2022-05-03T15:16:39.448104Z",
								"shell.execute_reply": "2022-05-03T15:16:39.470026Z"
							},
							"trusted": true,
							"colab": {
								"base_uri": "https://localhost:8080/",
								"height": 287
							},
							"id": "_dGcYrBT5y51",
							"executionInfo": {
								"status": "ok",
								"timestamp": 1654299093568,
								"user_tz": 420,
								"elapsed": 23,
								"user": {
									"displayName": "Nitin Pathak",
									"userId": "10038392480058271538"
								}
							},
							"outputId": "df30ed13-da47-4899-8494-531782dac48e"
						},
						"source": [
							"X.head()"
						],
						"outputs": [],
						"execution_count": 258
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.status.busy": "2022-05-03T15:16:40.524856Z",
								"iopub.execute_input": "2022-05-03T15:16:40.52518Z",
								"iopub.status.idle": "2022-05-03T15:16:40.893968Z",
								"shell.execute_reply.started": "2022-05-03T15:16:40.525147Z",
								"shell.execute_reply": "2022-05-03T15:16:40.893055Z"
							},
							"trusted": true,
							"id": "xd6mtSI15y52",
							"executionInfo": {
								"status": "ok",
								"timestamp": 1654299093743,
								"user_tz": 420,
								"elapsed": 195,
								"user": {
									"displayName": "Nitin Pathak",
									"userId": "10038392480058271538"
								}
							}
						},
						"source": [
							"from sklearn.model_selection import train_test_split\n",
							"x_train, x_test, y_train, y_test = train_test_split(X, y, test_size = 0.3\n",
							"                                                   , random_state = 0)"
						],
						"outputs": [],
						"execution_count": 259
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.status.busy": "2022-05-03T15:16:59.308729Z",
								"iopub.execute_input": "2022-05-03T15:16:59.309362Z",
								"iopub.status.idle": "2022-05-03T15:16:59.519198Z",
								"shell.execute_reply.started": "2022-05-03T15:16:59.309304Z",
								"shell.execute_reply": "2022-05-03T15:16:59.518328Z"
							},
							"trusted": true,
							"id": "TUL5AZLn5y52",
							"executionInfo": {
								"status": "ok",
								"timestamp": 1654299094055,
								"user_tz": 420,
								"elapsed": 314,
								"user": {
									"displayName": "Nitin Pathak",
									"userId": "10038392480058271538"
								}
							}
						},
						"source": [
							"from sklearn.ensemble import RandomForestRegressor\n",
							"reg = RandomForestRegressor(n_estimators = 200, random_state = 10, \n",
							"                            max_depth = 50)"
						],
						"outputs": [],
						"execution_count": 260
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.status.busy": "2022-05-03T15:17:02.411789Z",
								"iopub.execute_input": "2022-05-03T15:17:02.412077Z",
								"iopub.status.idle": "2022-05-03T15:17:06.471741Z",
								"shell.execute_reply.started": "2022-05-03T15:17:02.412048Z",
								"shell.execute_reply": "2022-05-03T15:17:06.471051Z"
							},
							"trusted": true,
							"colab": {
								"base_uri": "https://localhost:8080/"
							},
							"id": "_Qz8E-5Q5y52",
							"executionInfo": {
								"status": "ok",
								"timestamp": 1654299098474,
								"user_tz": 420,
								"elapsed": 4424,
								"user": {
									"displayName": "Nitin Pathak",
									"userId": "10038392480058271538"
								}
							},
							"outputId": "7ba5a5be-a0cb-490d-809e-f7c728a64b84"
						},
						"source": [
							"reg.fit(x_train, y_train)"
						],
						"outputs": [],
						"execution_count": 261
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.status.busy": "2022-05-03T15:17:06.47307Z",
								"iopub.execute_input": "2022-05-03T15:17:06.473423Z",
								"iopub.status.idle": "2022-05-03T15:17:06.542653Z",
								"shell.execute_reply.started": "2022-05-03T15:17:06.473393Z",
								"shell.execute_reply": "2022-05-03T15:17:06.541966Z"
							},
							"trusted": true,
							"id": "ngtfophz5y52",
							"executionInfo": {
								"status": "ok",
								"timestamp": 1654299098475,
								"user_tz": 420,
								"elapsed": 20,
								"user": {
									"displayName": "Nitin Pathak",
									"userId": "10038392480058271538"
								}
							}
						},
						"source": [
							"y_pred = reg.predict(x_test)\n",
							"\n",
							""
						],
						"outputs": [],
						"execution_count": 262
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.status.busy": "2022-05-03T15:17:10.112322Z",
								"iopub.execute_input": "2022-05-03T15:17:10.113067Z",
								"iopub.status.idle": "2022-05-03T15:17:10.118395Z",
								"shell.execute_reply.started": "2022-05-03T15:17:10.113018Z",
								"shell.execute_reply": "2022-05-03T15:17:10.117586Z"
							},
							"trusted": true,
							"colab": {
								"base_uri": "https://localhost:8080/"
							},
							"id": "ghjx42Ml5y52",
							"executionInfo": {
								"status": "ok",
								"timestamp": 1654299098475,
								"user_tz": 420,
								"elapsed": 18,
								"user": {
									"displayName": "Nitin Pathak",
									"userId": "10038392480058271538"
								}
							},
							"outputId": "9cd9df5b-db9d-4216-dcfd-cf1f03b0e123"
						},
						"source": [
							"from sklearn import metrics\n",
							"print('Mean Squared Error: ', metrics.mean_squared_error(y_test, y_pred))"
						],
						"outputs": [],
						"execution_count": 263
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.status.busy": "2022-05-03T15:17:14.656134Z",
								"iopub.execute_input": "2022-05-03T15:17:14.656427Z",
								"iopub.status.idle": "2022-05-03T15:17:14.66327Z",
								"shell.execute_reply.started": "2022-05-03T15:17:14.656396Z",
								"shell.execute_reply": "2022-05-03T15:17:14.6623Z"
							},
							"trusted": true,
							"colab": {
								"base_uri": "https://localhost:8080/"
							},
							"id": "6GBuAsIS5y53",
							"executionInfo": {
								"status": "ok",
								"timestamp": 1654299098475,
								"user_tz": 420,
								"elapsed": 16,
								"user": {
									"displayName": "Nitin Pathak",
									"userId": "10038392480058271538"
								}
							},
							"outputId": "7ded7b2f-1e24-4166-ea49-67181e905b8d"
						},
						"source": [
							"print('R2 score: ', metrics.r2_score(y_test, y_pred))"
						],
						"outputs": [],
						"execution_count": 264
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"id": "mkVQM9Qz5y53"
						},
						"source": [
							"### Ok so Random Forest gives a pretty good score but let's explore more with Cross validation."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.status.busy": "2022-05-03T15:18:13.731102Z",
								"iopub.execute_input": "2022-05-03T15:18:13.731722Z",
								"iopub.status.idle": "2022-05-03T15:18:13.73753Z",
								"shell.execute_reply.started": "2022-05-03T15:18:13.731667Z",
								"shell.execute_reply": "2022-05-03T15:18:13.736522Z"
							},
							"trusted": true,
							"colab": {
								"base_uri": "https://localhost:8080/"
							},
							"id": "A-IVvwaP5y53",
							"executionInfo": {
								"status": "ok",
								"timestamp": 1654299098476,
								"user_tz": 420,
								"elapsed": 16,
								"user": {
									"displayName": "Nitin Pathak",
									"userId": "10038392480058271538"
								}
							},
							"outputId": "c936a420-035b-4461-a943-63227a82d75e"
						},
						"source": [
							"y.shape"
						],
						"outputs": [],
						"execution_count": 265
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.status.busy": "2022-05-03T15:18:16.528407Z",
								"iopub.execute_input": "2022-05-03T15:18:16.529096Z",
								"iopub.status.idle": "2022-05-03T15:18:51.513801Z",
								"shell.execute_reply.started": "2022-05-03T15:18:16.529048Z",
								"shell.execute_reply": "2022-05-03T15:18:51.513163Z"
							},
							"trusted": true,
							"colab": {
								"base_uri": "https://localhost:8080/"
							},
							"id": "paFeRLFT5y53",
							"executionInfo": {
								"status": "ok",
								"timestamp": 1654299135093,
								"user_tz": 420,
								"elapsed": 36421,
								"user": {
									"displayName": "Nitin Pathak",
									"userId": "10038392480058271538"
								}
							},
							"outputId": "288267c0-ebe9-4814-811d-f4a838dfde9d"
						},
						"source": [
							"# Cross validation\n",
							"from sklearn.model_selection import KFold\n",
							"from sklearn.model_selection import cross_val_score\n",
							"\n",
							"results = cross_val_score(reg, x_train, y_train, cv = KFold(10))\n",
							"print(results)\n",
							"print(np.mean(results))"
						],
						"outputs": [],
						"execution_count": 266
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"id": "aSnMlh8R5y53"
						},
						"source": [
							"### Great! We have 96 % score now!"
						]
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"id": "JZnrJCrS5y53"
						},
						"source": [
							"### Let's check if Randomized Search CV gives us a better result."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.status.busy": "2022-05-03T15:21:30.6508Z",
								"iopub.execute_input": "2022-05-03T15:21:30.651571Z",
								"iopub.status.idle": "2022-05-03T15:21:30.657384Z",
								"shell.execute_reply.started": "2022-05-03T15:21:30.651525Z",
								"shell.execute_reply": "2022-05-03T15:21:30.656766Z"
							},
							"trusted": true,
							"id": "KZ55RcmX5y53",
							"executionInfo": {
								"status": "ok",
								"timestamp": 1654299135094,
								"user_tz": 420,
								"elapsed": 7,
								"user": {
									"displayName": "Nitin Pathak",
									"userId": "10038392480058271538"
								}
							}
						},
						"source": [
							"# # Randomized Search CV\n",
							"# from sklearn.model_selection import GridSearchCV\n",
							"# params = [{'n_estimators': [50, 100,200,300,400,500], \n",
							"#           'criterion': ['squared_error', 'absolute_error'],\n",
							"#            'max_depth': [10, 15, 30, 50, 100, 200],\n",
							"#            'max_features':['auto','sqrt','log2'],\n",
							"#            'random_state':[0, 10, 20, 50, 70, 100],\n",
							"#            'n_jobs':[-1,  1]}]"
						],
						"outputs": [],
						"execution_count": 267
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.status.busy": "2022-05-03T15:21:31.46533Z",
								"iopub.execute_input": "2022-05-03T15:21:31.466202Z",
								"iopub.status.idle": "2022-05-03T15:23:06.619044Z",
								"shell.execute_reply.started": "2022-05-03T15:21:31.466142Z",
								"shell.execute_reply": "2022-05-03T15:23:06.618117Z"
							},
							"trusted": true,
							"id": "HUtWHtoy5y54",
							"executionInfo": {
								"status": "ok",
								"timestamp": 1654299497850,
								"user_tz": 420,
								"elapsed": 362762,
								"user": {
									"displayName": "Nitin Pathak",
									"userId": "10038392480058271538"
								}
							}
						},
						"source": [
							"# # randomized Search CV\n",
							"# from sklearn.model_selection import RandomizedSearchCV\n",
							"# RScv = RandomizedSearchCV(reg, param_distributions = params, \n",
							"#                           n_iter = 5, cv = 5)\n",
							"# RScv = RScv.fit(x_train, y_train)"
						],
						"outputs": [],
						"execution_count": 268
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.status.busy": "2022-05-03T15:23:25.903052Z",
								"iopub.execute_input": "2022-05-03T15:23:25.90336Z",
								"iopub.status.idle": "2022-05-03T15:23:25.910366Z",
								"shell.execute_reply.started": "2022-05-03T15:23:25.903321Z",
								"shell.execute_reply": "2022-05-03T15:23:25.909747Z"
							},
							"trusted": true,
							"colab": {
								"base_uri": "https://localhost:8080/"
							},
							"id": "Vx2F8WiC5y54",
							"executionInfo": {
								"status": "ok",
								"timestamp": 1654299497851,
								"user_tz": 420,
								"elapsed": 41,
								"user": {
									"displayName": "Nitin Pathak",
									"userId": "10038392480058271538"
								}
							},
							"outputId": "c06f480a-55c1-4e36-d5c4-daf0f6bdd067"
						},
						"source": [
							"# RScv.best_score_"
						],
						"outputs": [],
						"execution_count": 269
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.status.busy": "2022-05-03T15:23:28.659534Z",
								"iopub.execute_input": "2022-05-03T15:23:28.659834Z",
								"iopub.status.idle": "2022-05-03T15:23:28.666436Z",
								"shell.execute_reply.started": "2022-05-03T15:23:28.659805Z",
								"shell.execute_reply": "2022-05-03T15:23:28.665599Z"
							},
							"trusted": true,
							"colab": {
								"base_uri": "https://localhost:8080/"
							},
							"id": "HawNsU515y54",
							"executionInfo": {
								"status": "ok",
								"timestamp": 1654299497852,
								"user_tz": 420,
								"elapsed": 17,
								"user": {
									"displayName": "Nitin Pathak",
									"userId": "10038392480058271538"
								}
							},
							"outputId": "a0ad63ca-73d9-472b-f2f5-8fa3e0217da9"
						},
						"source": [
							"# RScv.best_params_"
						],
						"outputs": [],
						"execution_count": 270
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.status.busy": "2022-05-03T15:23:31.687176Z",
								"iopub.execute_input": "2022-05-03T15:23:31.687468Z",
								"iopub.status.idle": "2022-05-03T15:23:35.948595Z",
								"shell.execute_reply.started": "2022-05-03T15:23:31.687435Z",
								"shell.execute_reply": "2022-05-03T15:23:35.947891Z"
							},
							"trusted": true,
							"colab": {
								"base_uri": "https://localhost:8080/"
							},
							"id": "Qj2-zxIm5y54",
							"executionInfo": {
								"status": "ok",
								"timestamp": 1654299505482,
								"user_tz": 420,
								"elapsed": 7641,
								"user": {
									"displayName": "Nitin Pathak",
									"userId": "10038392480058271538"
								}
							},
							"outputId": "9b0326a0-74f4-4fa7-9383-14b008259264"
						},
						"source": [
							"# reg_RS = RandomForestRegressor(random_state= 100,\n",
							"#  n_jobs= -1,\n",
							"#  n_estimators= 500,\n",
							"#  max_features= 'auto',\n",
							"#  max_depth= 100,\n",
							"#  criterion= 'mse')\n",
							"# reg_RS.fit(x_train, y_train)"
						],
						"outputs": [],
						"execution_count": 271
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.status.busy": "2022-05-03T15:23:42.857958Z",
								"iopub.execute_input": "2022-05-03T15:23:42.858276Z",
								"iopub.status.idle": "2022-05-03T15:23:43.067848Z",
								"shell.execute_reply.started": "2022-05-03T15:23:42.858237Z",
								"shell.execute_reply": "2022-05-03T15:23:43.066815Z"
							},
							"trusted": true,
							"id": "n1yDodMs5y54",
							"executionInfo": {
								"status": "ok",
								"timestamp": 1654299505696,
								"user_tz": 420,
								"elapsed": 220,
								"user": {
									"displayName": "Nitin Pathak",
									"userId": "10038392480058271538"
								}
							}
						},
						"source": [
							"# RS_pred = reg_RS.predict(x_test)"
						],
						"outputs": [],
						"execution_count": 272
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.status.busy": "2022-05-03T15:23:45.735784Z",
								"iopub.execute_input": "2022-05-03T15:23:45.736139Z",
								"iopub.status.idle": "2022-05-03T15:23:45.744512Z",
								"shell.execute_reply.started": "2022-05-03T15:23:45.73606Z",
								"shell.execute_reply": "2022-05-03T15:23:45.743438Z"
							},
							"trusted": true,
							"colab": {
								"base_uri": "https://localhost:8080/"
							},
							"id": "LHrFrlrM5y54",
							"executionInfo": {
								"status": "ok",
								"timestamp": 1654299505697,
								"user_tz": 420,
								"elapsed": 11,
								"user": {
									"displayName": "Nitin Pathak",
									"userId": "10038392480058271538"
								}
							},
							"outputId": "64f795a5-e49a-480c-de60-2d2c69fcf2cb"
						},
						"source": [
							"# print('MSE: ',metrics.mean_squared_error(y_test, RS_pred))\n",
							"# print('R2 score',metrics.r2_score(y_test, RS_pred))"
						],
						"outputs": [],
						"execution_count": 273
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"id": "sXTWPioY5y54"
						},
						"source": [
							"### So there was no significant improvement after using RandomizedSearchCV"
						]
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"id": "nhOt8hYx5y55"
						},
						"source": [
							"### Let us try other algorithms as well just in case"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.status.busy": "2022-05-03T15:27:24.575652Z",
								"iopub.execute_input": "2022-05-03T15:27:24.576379Z",
								"iopub.status.idle": "2022-05-03T15:27:36.994313Z",
								"shell.execute_reply.started": "2022-05-03T15:27:24.57634Z",
								"shell.execute_reply": "2022-05-03T15:27:36.993481Z"
							},
							"trusted": true,
							"colab": {
								"base_uri": "https://localhost:8080/"
							},
							"id": "j3PlOprC5y55",
							"executionInfo": {
								"status": "ok",
								"timestamp": 1654299509824,
								"user_tz": 420,
								"elapsed": 4133,
								"user": {
									"displayName": "Nitin Pathak",
									"userId": "10038392480058271538"
								}
							},
							"outputId": "88f4d666-1cd6-4828-9849-0d08015f5e03"
						},
						"source": [
							"# trying other algorithms\n",
							"#!pip install xgboost"
						],
						"outputs": [],
						"execution_count": 274
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.status.busy": "2022-05-03T15:27:36.996305Z",
								"iopub.execute_input": "2022-05-03T15:27:36.996592Z",
								"iopub.status.idle": "2022-05-03T15:27:37.111725Z",
								"shell.execute_reply.started": "2022-05-03T15:27:36.996556Z",
								"shell.execute_reply": "2022-05-03T15:27:37.110852Z"
							},
							"trusted": true,
							"id": "K2vh0MAC5y55",
							"executionInfo": {
								"status": "ok",
								"timestamp": 1654299510020,
								"user_tz": 420,
								"elapsed": 226,
								"user": {
									"displayName": "Nitin Pathak",
									"userId": "10038392480058271538"
								}
							}
						},
						"source": [
							"from xgboost import XGBRegressor"
						],
						"outputs": [],
						"execution_count": 275
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.status.busy": "2022-05-03T15:27:37.113553Z",
								"iopub.execute_input": "2022-05-03T15:27:37.113897Z",
								"iopub.status.idle": "2022-05-03T15:27:37.120048Z",
								"shell.execute_reply.started": "2022-05-03T15:27:37.113863Z",
								"shell.execute_reply": "2022-05-03T15:27:37.118732Z"
							},
							"trusted": true,
							"id": "DWMnj7u25y55",
							"executionInfo": {
								"status": "ok",
								"timestamp": 1654299510021,
								"user_tz": 420,
								"elapsed": 5,
								"user": {
									"displayName": "Nitin Pathak",
									"userId": "10038392480058271538"
								}
							}
						},
						"source": [
							"model = XGBRegressor(n_estimators=1000, max_depth=7, eta=0.1, subsample=0.7, colsample_bytree=0.8)\n",
							"model1 = XGBRegressor()"
						],
						"outputs": [],
						"execution_count": 276
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.status.busy": "2022-05-03T15:27:37.122385Z",
								"iopub.execute_input": "2022-05-03T15:27:37.122742Z",
								"iopub.status.idle": "2022-05-03T15:27:37.708999Z",
								"shell.execute_reply.started": "2022-05-03T15:27:37.122697Z",
								"shell.execute_reply": "2022-05-03T15:27:37.708204Z"
							},
							"trusted": true,
							"colab": {
								"base_uri": "https://localhost:8080/"
							},
							"id": "xbCC3Yoc5y55",
							"executionInfo": {
								"status": "ok",
								"timestamp": 1654299510682,
								"user_tz": 420,
								"elapsed": 665,
								"user": {
									"displayName": "Nitin Pathak",
									"userId": "10038392480058271538"
								}
							},
							"outputId": "5321ad4f-c1ae-404b-c2c5-c908332cc8f7"
						},
						"source": [
							"model1.fit(x_train, y_train)"
						],
						"outputs": [],
						"execution_count": 277
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.status.busy": "2022-05-03T15:27:45.072601Z",
								"iopub.execute_input": "2022-05-03T15:27:45.073198Z",
								"iopub.status.idle": "2022-05-03T15:27:45.083294Z",
								"shell.execute_reply.started": "2022-05-03T15:27:45.073154Z",
								"shell.execute_reply": "2022-05-03T15:27:45.082647Z"
							},
							"trusted": true,
							"id": "hcw_cdRj5y55",
							"executionInfo": {
								"status": "ok",
								"timestamp": 1654299510683,
								"user_tz": 420,
								"elapsed": 9,
								"user": {
									"displayName": "Nitin Pathak",
									"userId": "10038392480058271538"
								}
							}
						},
						"source": [
							"xg_pred = model1.predict(x_test)"
						],
						"outputs": [],
						"execution_count": 278
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.status.busy": "2022-05-03T15:27:53.974129Z",
								"iopub.execute_input": "2022-05-03T15:27:53.974409Z",
								"iopub.status.idle": "2022-05-03T15:27:53.982541Z",
								"shell.execute_reply.started": "2022-05-03T15:27:53.974379Z",
								"shell.execute_reply": "2022-05-03T15:27:53.981376Z"
							},
							"trusted": true,
							"colab": {
								"base_uri": "https://localhost:8080/"
							},
							"id": "VB5OaPhn5y55",
							"executionInfo": {
								"status": "ok",
								"timestamp": 1654299510928,
								"user_tz": 420,
								"elapsed": 251,
								"user": {
									"displayName": "Nitin Pathak",
									"userId": "10038392480058271538"
								}
							},
							"outputId": "3005c3db-a1a8-41ff-8eb5-933a61fa6daa"
						},
						"source": [
							"print('Mean Squared Error: ',metrics.mean_squared_error(y_test, xg_pred))\n",
							"print('R2 score: ',metrics.r2_score(y_test, xg_pred))"
						],
						"outputs": [],
						"execution_count": 279
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.status.busy": "2022-05-03T15:27:58.645075Z",
								"iopub.execute_input": "2022-05-03T15:27:58.645784Z",
								"iopub.status.idle": "2022-05-03T15:28:02.951046Z",
								"shell.execute_reply.started": "2022-05-03T15:27:58.645736Z",
								"shell.execute_reply": "2022-05-03T15:28:02.950358Z"
							},
							"trusted": true,
							"colab": {
								"base_uri": "https://localhost:8080/"
							},
							"id": "M0u2BvOd5y55",
							"executionInfo": {
								"status": "ok",
								"timestamp": 1654299516480,
								"user_tz": 420,
								"elapsed": 5556,
								"user": {
									"displayName": "Nitin Pathak",
									"userId": "10038392480058271538"
								}
							},
							"outputId": "c3534351-7bdb-46f6-cf3c-fc311e2e86ac"
						},
						"source": [
							"# trying with params\n",
							"model.fit(x_train,y_train)\n",
							"xg_pred1 = model.predict(x_test)"
						],
						"outputs": [],
						"execution_count": 280
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.status.busy": "2022-05-03T15:28:05.496287Z",
								"iopub.execute_input": "2022-05-03T15:28:05.496572Z",
								"iopub.status.idle": "2022-05-03T15:28:05.505772Z",
								"shell.execute_reply.started": "2022-05-03T15:28:05.496542Z",
								"shell.execute_reply": "2022-05-03T15:28:05.504082Z"
							},
							"trusted": true,
							"colab": {
								"base_uri": "https://localhost:8080/"
							},
							"id": "4oEAIq2d5y56",
							"executionInfo": {
								"status": "ok",
								"timestamp": 1654299516481,
								"user_tz": 420,
								"elapsed": 27,
								"user": {
									"displayName": "Nitin Pathak",
									"userId": "10038392480058271538"
								}
							},
							"outputId": "8077e760-b03b-49f9-8695-e7494d71bef2"
						},
						"source": [
							"print('Mean squared error: ',metrics.mean_squared_error(y_test,xg_pred1))\n",
							"print('r2 score: ',metrics.r2_score(y_test, xg_pred1))"
						],
						"outputs": [],
						"execution_count": 281
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"id": "Q5K72L4z5y56"
						},
						"source": [
							"### So with XgBoost we are getting a better mse score"
						]
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"id": "9ssehlxv5y56"
						},
						"source": [
							"### Let us try Cross Validation here as well"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.status.busy": "2022-05-03T15:29:08.379167Z",
								"iopub.execute_input": "2022-05-03T15:29:08.379482Z",
								"iopub.status.idle": "2022-05-03T15:29:13.852066Z",
								"shell.execute_reply.started": "2022-05-03T15:29:08.37945Z",
								"shell.execute_reply": "2022-05-03T15:29:13.851277Z"
							},
							"trusted": true,
							"colab": {
								"base_uri": "https://localhost:8080/"
							},
							"id": "G1JWV4bE5y56",
							"executionInfo": {
								"status": "ok",
								"timestamp": 1654299520868,
								"user_tz": 420,
								"elapsed": 4411,
								"user": {
									"displayName": "Nitin Pathak",
									"userId": "10038392480058271538"
								}
							},
							"outputId": "0b664637-0e42-419a-da46-ce956187ad95"
						},
						"source": [
							"# # cross validation for xgboost\n",
							"# xg_result = cross_val_score(model1, x_train, y_train, cv = KFold(10))\n",
							"# print(xg_result)\n",
							"# print(np.mean(xg_result))"
						],
						"outputs": [],
						"execution_count": 282
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"id": "aWhkVt2q5y56"
						},
						"source": [
							"### Some more algorithms...."
						]
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"id": "WIqq7_mY5y56"
						},
						"source": [
							"### Ransac algorithm is known to deal with outliers. Let's check if it works for us"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.status.busy": "2022-05-03T15:30:09.351462Z",
								"iopub.execute_input": "2022-05-03T15:30:09.351924Z",
								"iopub.status.idle": "2022-05-03T15:30:09.428985Z",
								"shell.execute_reply.started": "2022-05-03T15:30:09.351884Z",
								"shell.execute_reply": "2022-05-03T15:30:09.427995Z"
							},
							"trusted": true,
							"colab": {
								"base_uri": "https://localhost:8080/"
							},
							"id": "0QOdq_o05y56",
							"executionInfo": {
								"status": "ok",
								"timestamp": 1654299520870,
								"user_tz": 420,
								"elapsed": 11,
								"user": {
									"displayName": "Nitin Pathak",
									"userId": "10038392480058271538"
								}
							},
							"outputId": "0b6b7877-d74c-4e3b-b292-8bd8916fc0dc"
						},
						"source": [
							"# ransac regression\n",
							"from sklearn.linear_model import RANSACRegressor\n",
							"ransac = RANSACRegressor(min_samples=10, max_trials=50, loss='absolute_loss', random_state=42, residual_threshold=50)\n",
							"ransac.fit(x_train, y_train)\n",
							"predsRR = ransac.predict(x_test)\n",
							"mse = metrics.mean_squared_error(y_test, predsRR)\n",
							"print(\"MSE : % f\" %(mse))"
						],
						"outputs": [],
						"execution_count": 283
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.status.busy": "2022-05-03T15:30:15.898444Z",
								"iopub.execute_input": "2022-05-03T15:30:15.898805Z",
								"iopub.status.idle": "2022-05-03T15:30:15.906199Z",
								"shell.execute_reply.started": "2022-05-03T15:30:15.898753Z",
								"shell.execute_reply": "2022-05-03T15:30:15.905292Z"
							},
							"trusted": true,
							"colab": {
								"base_uri": "https://localhost:8080/"
							},
							"id": "FdAxZH7f5y56",
							"executionInfo": {
								"status": "ok",
								"timestamp": 1654299521090,
								"user_tz": 420,
								"elapsed": 9,
								"user": {
									"displayName": "Nitin Pathak",
									"userId": "10038392480058271538"
								}
							},
							"outputId": "c0d6617b-8f13-4298-c2e5-87d1330edf1f"
						},
						"source": [
							"print('R2 score', metrics.r2_score(y_test, predsRR))"
						],
						"outputs": [],
						"execution_count": 284
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.status.busy": "2022-05-03T15:30:34.40684Z",
								"iopub.execute_input": "2022-05-03T15:30:34.407472Z",
								"iopub.status.idle": "2022-05-03T15:30:45.028057Z",
								"shell.execute_reply.started": "2022-05-03T15:30:34.407429Z",
								"shell.execute_reply": "2022-05-03T15:30:45.027265Z"
							},
							"trusted": true,
							"colab": {
								"base_uri": "https://localhost:8080/"
							},
							"id": "SHO0D3nC5y57",
							"executionInfo": {
								"status": "ok",
								"timestamp": 1654299539607,
								"user_tz": 420,
								"elapsed": 18523,
								"user": {
									"displayName": "Nitin Pathak",
									"userId": "10038392480058271538"
								}
							},
							"outputId": "1639a2a7-771c-437b-e2c0-217adce34515"
						},
						"source": [
							"# !pip install catboost"
						],
						"outputs": [],
						"execution_count": 285
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.status.busy": "2022-05-03T15:30:45.030179Z",
								"iopub.execute_input": "2022-05-03T15:30:45.030463Z",
								"iopub.status.idle": "2022-05-03T15:30:48.625641Z",
								"shell.execute_reply.started": "2022-05-03T15:30:45.030426Z",
								"shell.execute_reply": "2022-05-03T15:30:48.624729Z"
							},
							"trusted": true,
							"colab": {
								"base_uri": "https://localhost:8080/",
								"height": 1000,
								"referenced_widgets": [
									"691c0d2e0deb46048fec23ddc69677f8"
								]
							},
							"id": "hTIyGG2j5y57",
							"executionInfo": {
								"status": "ok",
								"timestamp": 1654299553652,
								"user_tz": 420,
								"elapsed": 14055,
								"user": {
									"displayName": "Nitin Pathak",
									"userId": "10038392480058271538"
								}
							},
							"outputId": "ea39f658-eb2d-4a76-e583-dac2827a6462"
						},
						"source": [
							"# from catboost import CatBoostRegressor\n",
							"# cat= CatBoostRegressor(loss_function='RMSE')\n",
							"# cat.fit(x_train, y_train, eval_set = (x_test, y_test), plot=True)"
						],
						"outputs": [],
						"execution_count": 286
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"id": "z8Yh2ps85y5_"
						},
						"source": [
							"### Conclusion"
						]
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"id": "dZsg6Z0W5y5_"
						},
						"source": [
							"### XgBoost - Mean squared error:  0.0014111426048558611  R2 score:  0.962317634886713\n",
							"### Random Forest - Mean Squared Error:  0.0015578614449765099 R2 score - 0.960961324424398 "
						]
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Pune Rainfall')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "nrpsparkpool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "c3ca414c-977f-4c1d-9922-ae686e13994e"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1"
					},
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/0c9ca8c4-a7be-4a66-a8b2-10b180fc0ca9/resourceGroups/LABS/providers/Microsoft.Synapse/workspaces/nrpsynapse/bigDataPools/nrpsparkpool",
						"name": "nrpsparkpool",
						"type": "Spark",
						"endpoint": "https://nrpsynapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/nrpsparkpool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net",
							"authHeader": null
						},
						"sparkVersion": "2.4",
						"nodeCount": 10,
						"cores": 8,
						"memory": 56,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"![Rain Fall Prediction](https://1.bp.blogspot.com/-_p3M8657oUw/TjT9XyqhpjI/AAAAAAAAAJU/QiMtwJxNk9Q/s1600/kids.jpg)"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"spark.version"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#Import some basic libraries\r\n",
							"import numpy as np\r\n",
							"import pandas as pd"
						],
						"outputs": []
					},
					{
						"cell_type": "code",
						"source": [
							"sparkDF = spark.read.load('abfss://test@nitinadls2.dfs.core.windows.net/PuneRainfall/PuneIndia.csv', format='csv', header=True)\r\n",
							"print('Converting to Pandas.')\r\n",
							"\r\n",
							"data = sparkDF.toPandas()\r\n",
							"print(data)"
						],
						"outputs": []
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#Now we will cheak if any colomns is left empty\r\n",
							"data.apply(lambda x:sum(x.isnull()), axis=0)"
						],
						"outputs": []
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#We want the data in numbers, therefore we will replace the yes/no in floods coloumn by 1/0\r\n",
							"data['FLOODS'].replace(['YES','NO'],[1,0],inplace=True)\r\n",
							"#Let's see how are data looks like now\r\n",
							"data.head()"
						],
						"outputs": []
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#Now let's seperate the data which we are gonna use for prediction\r\n",
							"x = data.iloc[:,1:14]\r\n",
							"x.head()"
						],
						"outputs": []
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#Now seperate the flood label from the dataset\r\n",
							"y = data.iloc[:, -1]\r\n",
							"y.head()"
						],
						"outputs": []
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#Data might be widely distributed so let's scale it between 0 and 1\r\n",
							"from sklearn import preprocessing\r\n",
							"minmax = preprocessing.MinMaxScaler(feature_range=(0,1))\r\n",
							"minmax.fit(x).transform(x)"
						],
						"outputs": []
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#Let's divide the dataset into 2 sets:train and test in ratio (4:1)\r\n",
							"from sklearn import model_selection,neighbors\r\n",
							"from sklearn.model_selection import train_test_split\r\n",
							"x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2)\r\n",
							""
						],
						"outputs": []
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#Let's see how our train set looks like\r\n",
							"x_train.head()"
						],
						"outputs": []
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"y_train.head()"
						],
						"outputs": []
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"\r\n",
							"<H1>1. KNN Classifier</H1>"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"clf = neighbors.KNeighborsClassifier()\r\n",
							"knn_clf = clf.fit(x_train,y_train)"
						],
						"outputs": []
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#Let's predict chances of flood\r\n",
							"y_predict = knn_clf.predict(x_test)\r\n",
							"print('predicted chances of flood')\r\n",
							"print(y_predict)"
						],
						"outputs": []
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#Actual chances of flood\r\n",
							"print(\"actual values of floods:\")\r\n",
							"print(y_test)"
						],
						"outputs": []
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from sklearn.model_selection import cross_val_score"
						],
						"outputs": []
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"knn_accuracy = cross_val_score(knn_clf,x_test,y_test,cv=3,scoring='accuracy',n_jobs=-1)"
						],
						"outputs": []
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"knn_accuracy.mean()"
						],
						"outputs": []
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"<H1>2. Logistic Regression </H1>"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"x_train_std = minmax.fit_transform(x_train)\r\n",
							"x_test_std = minmax.transform(x_test)"
						],
						"outputs": []
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from sklearn.model_selection import cross_val_score\r\n",
							"from sklearn.linear_model import LogisticRegression\r\n",
							"\r\n",
							"lr = LogisticRegression()\r\n",
							"lr_clf = lr.fit(x_train_std,y_train)\r\n",
							"\r\n",
							"lr_accuracy = cross_val_score(lr_clf,x_test_std,y_test,cv=3,scoring='accuracy',n_jobs=-1)"
						],
						"outputs": []
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"lr_accuracy.mean()"
						],
						"outputs": []
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"y_predict = lr_clf.predict(x_test_std)\r\n",
							"print('Predicted chances of flood')\r\n",
							"print(y_predict)"
						],
						"outputs": []
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"print('Actual chances of flood')\r\n",
							"print(y_test.values)"
						],
						"outputs": []
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from sklearn.metrics import accuracy_score,recall_score,roc_auc_score,confusion_matrix\r\n",
							"print(\"\\naccuracy score: %f\"%(accuracy_score(y_test,y_predict)*100))\r\n",
							"print(\"recall score: %f\"%(recall_score(y_test,y_predict)*100))\r\n",
							"print(\"roc score: %f\"%(roc_auc_score(y_test,y_predict)*100))"
						],
						"outputs": []
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"<H1>3. Decision Tree Classification</H1>"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from sklearn.tree import DecisionTreeClassifier\r\n",
							"dtc_clf = DecisionTreeClassifier()\r\n",
							"dtc_clf.fit(x_train,y_train)\r\n",
							"dtc_clf_acc = cross_val_score(dtc_clf,x_train_std,y_train,cv=3,scoring=\"accuracy\",n_jobs=-1)\r\n",
							"dtc_clf_acc"
						],
						"outputs": []
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#Predicted flood chances\r\n",
							"y_pred = dtc_clf.predict(x_test)\r\n",
							"print(y_pred)"
						],
						"outputs": []
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#Actual flood chances\r\n",
							"print(\"actual values:\")\r\n",
							"print(y_test.values)"
						],
						"outputs": []
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from sklearn.metrics import accuracy_score,recall_score,roc_auc_score,confusion_matrix\r\n",
							"print(\"\\naccuracy score:%f\"%(accuracy_score(y_test,y_pred)*100))\r\n",
							"print(\"recall score:%f\"%(recall_score(y_test,y_pred)*100))\r\n",
							"print(\"roc score:%f\"%(roc_auc_score(y_test,y_pred)*100))"
						],
						"outputs": []
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"<H1>4. Random Forest Classification</H1>"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from sklearn.ensemble import RandomForestClassifier\r\n",
							"rmf = RandomForestClassifier(max_depth=3,random_state=0)\r\n",
							"rmf_clf = rmf.fit(x_train,y_train)\r\n",
							"rmf_clf"
						],
						"outputs": []
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"rmf_clf_acc = cross_val_score(rmf_clf,x_train_std,y_train,cv=3,scoring=\"accuracy\",n_jobs=-1)\r\n",
							"#rmf_proba = cross_val_predict(rmf_clf,x_train_std,y_train,cv=3,method='predict_proba')"
						],
						"outputs": []
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"rmf_clf_acc"
						],
						"outputs": []
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"y_pred = rmf_clf.predict(x_test)"
						],
						"outputs": []
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from sklearn.metrics import accuracy_score,recall_score,roc_auc_score,confusion_matrix\r\n",
							"print(\"\\naccuracy score:%f\"%(accuracy_score(y_test,y_pred)*100))\r\n",
							"print(\"recall score:%f\"%(recall_score(y_test,y_pred)*100))\r\n",
							"print(\"roc score:%f\"%(roc_auc_score(y_test,y_pred)*100))"
						],
						"outputs": []
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"<H1>5. Ensemble Learning</H1>"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from sklearn.ensemble import VotingClassifier\r\n",
							"from sklearn.ensemble import RandomForestClassifier\r\n",
							"from sklearn.linear_model import LogisticRegression\r\n",
							"from sklearn.neighbors import KNeighborsClassifier\r\n",
							"\r\n",
							"log_clf = LogisticRegression(solver=\"liblinear\", random_state=42)\r\n",
							"rnd_clf = RandomForestClassifier(n_estimators=10, random_state=42)\r\n",
							"knn_clf = KNeighborsClassifier()\r\n",
							"\r\n",
							"voting = VotingClassifier(\r\n",
							"    estimators=[('lr', log_clf), ('rf', rnd_clf), ('knn', knn_clf)],\r\n",
							"    voting='hard')"
						],
						"outputs": []
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"voting_clf = voting.fit(x_train, y_train)"
						],
						"outputs": []
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from sklearn.metrics import accuracy_score\r\n",
							"\r\n",
							"for clf in (log_clf, rnd_clf, knn_clf, voting_clf):\r\n",
							"    clf.fit(x_train, y_train)\r\n",
							"    y_pred = clf.predict(x_test)\r\n",
							"    print(clf.__class__.__name__, accuracy_score(y_test, y_pred))"
						],
						"outputs": []
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"<H1>Comparing All 5 prediction Models</H1>"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"models = []\r\n",
							"from sklearn.neighbors import KNeighborsClassifier\r\n",
							"from sklearn.linear_model import LogisticRegression\r\n",
							"from sklearn.tree import DecisionTreeClassifier\r\n",
							"from sklearn.svm import SVC\r\n",
							"from sklearn.ensemble import RandomForestClassifier\r\n",
							"from sklearn.ensemble import VotingClassifier\r\n",
							"models.append(('KNN', KNeighborsClassifier()))\r\n",
							"models.append(('LR', LogisticRegression()))\r\n",
							"models.append(('DT', DecisionTreeClassifier()))\r\n",
							"models.append(('RF', RandomForestClassifier()))\r\n",
							"models.append(('EL', VotingClassifier(\r\n",
							"    estimators=[('lr', log_clf), ('rf', rnd_clf), ('knn', knn_clf)],\r\n",
							"    voting='hard')))\r\n",
							"\r\n",
							"\r\n",
							"names = []\r\n",
							"scores = []\r\n",
							"for name, model in models:\r\n",
							"    model.fit(x_train, y_train)\r\n",
							"    y_pred = model.predict(x_test)\r\n",
							"    scores.append(accuracy_score(y_test, y_pred))\r\n",
							"    names.append(name)\r\n",
							"tr_split = pd.DataFrame({'Name': names, 'Score': scores})\r\n",
							"print(tr_split)"
						],
						"outputs": []
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"import seaborn as sns\r\n",
							"from matplotlib import pyplot as plt\r\n",
							"axis = sns.barplot(x = 'Name', y = 'Score', data =tr_split )\r\n",
							"axis.set(xlabel='Classifier', ylabel='Accuracy')\r\n",
							"for p in axis.patches:\r\n",
							"    height = p.get_height()\r\n",
							"    axis.text(p.get_x() + p.get_width()/2, height + 0.005, '{:1.4f}'.format(height), ha=\"center\") \r\n",
							"    \r\n",
							"plt.show()"
						],
						"outputs": []
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/cdtfa')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "4292f4c1-ba63-48fc-a56c-194cc9580743"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1"
					},
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"import pandas\r\n",
							"\r\n",
							"   #read csv file\r\n",
							"   df = pandas.read_csv('abfs[s]://file_system_name@account_name.dfs.core.windows.net/file_path')\r\n",
							"   print(df)\r\n",
							""
						],
						"outputs": []
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/traffic-prediction-and-some-analysis')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Traffic"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "nrpmcapsssa",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "747910cd-4971-47e8-bdde-c43b72b1e5ae"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/f42cdd05-e6d8-4cc0-81aa-a5b83a471c1f/resourceGroups/nrpcustomers/providers/Microsoft.Synapse/workspaces/nrpmcapssa/bigDataPools/nrpmcapsssa",
						"name": "nrpmcapsssa",
						"type": "Spark",
						"endpoint": "https://nrpmcapssa.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/nrpmcapsssa",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 3,
						"cores": 8,
						"memory": 56,
						"automaticScaleJobs": false
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"papermill": {
								"duration": 0.052693,
								"end_time": "2021-09-27T02:05:55.7839Z",
								"exception": false,
								"start_time": "2021-09-27T02:05:55.731207Z",
								"status": "completed"
							},
							"tags": []
						},
						"source": [
							"# Some basic info about this dataset\n",
							"- Has 4 Junction"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.execute_input": "2021-09-27T02:05:56.012052Z",
								"iopub.status.busy": "2021-09-27T02:05:56.011395Z",
								"iopub.status.idle": "2021-09-27T02:05:57.536677Z",
								"shell.execute_reply": "2021-09-27T02:05:57.537164Z",
								"shell.execute_reply.started": "2021-09-27T02:02:44.5151Z"
							},
							"papermill": {
								"duration": 1.582162,
								"end_time": "2021-09-27T02:05:57.537355Z",
								"exception": false,
								"start_time": "2021-09-27T02:05:55.955193Z",
								"status": "completed"
							},
							"tags": []
						},
						"source": [
							"import seaborn as sns\n",
							"import matplotlib.pyplot as plt\n",
							"from matplotlib.dates import DateFormatter\n",
							"from datetime import datetime, timedelta, date\n",
							"from scipy import stats\n",
							"from sklearn.preprocessing import StandardScaler\n",
							"from sklearn.model_selection import train_test_split\n",
							"from sklearn.ensemble import RandomForestRegressor\n",
							"from sklearn.ensemble import GradientBoostingRegressor\n",
							"from sklearn.metrics import r2_score, mean_squared_error\n",
							"from statsmodels.graphics.tsaplots import plot_acf, plot_pacf"
						],
						"outputs": [],
						"execution_count": 24
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.execute_input": "2021-09-27T02:05:57.645349Z",
								"iopub.status.busy": "2021-09-27T02:05:57.644714Z",
								"iopub.status.idle": "2021-09-27T02:05:57.759108Z",
								"shell.execute_reply": "2021-09-27T02:05:57.759719Z",
								"shell.execute_reply.started": "2021-09-27T02:02:45.906242Z"
							},
							"papermill": {
								"duration": 0.171447,
								"end_time": "2021-09-27T02:05:57.759894Z",
								"exception": false,
								"start_time": "2021-09-27T02:05:57.588447Z",
								"status": "completed"
							},
							"tags": []
						},
						"source": [
							"# Read the read data from ADLS2\n",
							"import fsspec\n",
							"import pandas as pd\n",
							"\n",
							"adls_account_name = 'nrpscrratchdata' #Provide exact ADLS account name\n",
							"adls_account_key = 'Bou2Ri3GZQ0BgfNJ4iOIB49tLWn5XRPkdwsT16G7s5fDHclkDSvhku+TyHPjqxKOehFNdR1lgGgT+AStBPV75w==' #Provide exact ADLS account key\n",
							"\n",
							"fsspec_handle = fsspec.open('abfs://synapse/traffic.csv', account_name=adls_account_name, account_key=adls_account_key)\n",
							"\n",
							"with fsspec_handle.open() as f:\n",
							"    df = pd.read_csv(f)"
						],
						"outputs": [],
						"execution_count": 25
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"papermill": {
								"duration": 0.050679,
								"end_time": "2021-09-27T02:05:57.865548Z",
								"exception": false,
								"start_time": "2021-09-27T02:05:57.814869Z",
								"status": "completed"
							},
							"tags": []
						},
						"source": [
							"**Some describe in this dataset**"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.execute_input": "2021-09-27T02:05:57.970568Z",
								"iopub.status.busy": "2021-09-27T02:05:57.969966Z",
								"iopub.status.idle": "2021-09-27T02:05:57.99596Z",
								"shell.execute_reply": "2021-09-27T02:05:57.995392Z",
								"shell.execute_reply.started": "2021-09-27T02:02:46.002524Z"
							},
							"papermill": {
								"duration": 0.079649,
								"end_time": "2021-09-27T02:05:57.996104Z",
								"exception": false,
								"start_time": "2021-09-27T02:05:57.916455Z",
								"status": "completed"
							},
							"tags": []
						},
						"source": [
							"df.describe()"
						],
						"outputs": [],
						"execution_count": 26
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"papermill": {
								"duration": 0.051323,
								"end_time": "2021-09-27T02:05:58.101554Z",
								"exception": false,
								"start_time": "2021-09-27T02:05:58.050231Z",
								"status": "completed"
							},
							"tags": []
						},
						"source": [
							""
						]
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"papermill": {
								"duration": 0.051363,
								"end_time": "2021-09-27T02:05:58.205843Z",
								"exception": false,
								"start_time": "2021-09-27T02:05:58.15448Z",
								"status": "completed"
							},
							"tags": []
						},
						"source": [
							"**Extract Year, Month, Day, Hour** from **index**\n",
							"- I split Year, Month, Day, Hour from data for plotting purpose"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df"
						],
						"outputs": [],
						"execution_count": 27
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.execute_input": "2021-09-27T02:05:58.333058Z",
								"iopub.status.busy": "2021-09-27T02:05:58.317257Z",
								"iopub.status.idle": "2021-09-27T02:05:59.650951Z",
								"shell.execute_reply": "2021-09-27T02:05:59.650266Z",
								"shell.execute_reply.started": "2021-09-27T02:02:46.028463Z"
							},
							"papermill": {
								"duration": 1.393475,
								"end_time": "2021-09-27T02:05:59.651087Z",
								"exception": false,
								"start_time": "2021-09-27T02:05:58.257612Z",
								"status": "completed"
							},
							"tags": []
						},
						"source": [
							"# # extract year from date\n",
							"# df['Year'] = pd.Series(df.index).apply(lambda x: x.year).to_list()\n",
							"\n",
							"# # extract month from date\n",
							"# df['Month'] = pd.Series(df.index).apply(lambda x: x.month).to_list()\n",
							"\n",
							"# # extract day from date\n",
							"# df['Day'] = pd.Series(df.index).apply(lambda x: x.day).to_list()\n",
							"\n",
							"# # extract hour from date\n",
							"# df['Hour'] = pd.Series(df.index).apply(lambda x: x.hour).to_list()\n",
							"\n",
							"df['Year'] = pd.DatetimeIndex(df['DateTime']).year\n",
							"df['Month'] = pd.DatetimeIndex(df['DateTime']).month\n",
							"df['Day'] = pd.DatetimeIndex(df['DateTime']).day\n",
							"df['Hour'] = pd.DatetimeIndex(df['DateTime']).hour\n",
							"\n",
							"df\n",
							""
						],
						"outputs": [],
						"execution_count": 28
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"papermill": {
								"duration": 0.051256,
								"end_time": "2021-09-27T02:05:59.754734Z",
								"exception": false,
								"start_time": "2021-09-27T02:05:59.703478Z",
								"status": "completed"
							},
							"tags": []
						},
						"source": [
							"**Drop the ID column**\n",
							"I think ID does not effect to this dataset, so just drop it!"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.execute_input": "2021-09-27T02:05:59.863453Z",
								"iopub.status.busy": "2021-09-27T02:05:59.86282Z",
								"iopub.status.idle": "2021-09-27T02:05:59.870901Z",
								"shell.execute_reply": "2021-09-27T02:05:59.870238Z",
								"shell.execute_reply.started": "2021-09-27T02:02:46.842669Z"
							},
							"papermill": {
								"duration": 0.064822,
								"end_time": "2021-09-27T02:05:59.871039Z",
								"exception": false,
								"start_time": "2021-09-27T02:05:59.806217Z",
								"status": "completed"
							},
							"tags": []
						},
						"source": [
							"df.drop('ID', axis=1, inplace=True)"
						],
						"outputs": [],
						"execution_count": 29
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"papermill": {
								"duration": 0.051016,
								"end_time": "2021-09-27T02:05:59.973715Z",
								"exception": false,
								"start_time": "2021-09-27T02:05:59.922699Z",
								"status": "completed"
							},
							"tags": []
						},
						"source": [
							"I make a `make_hist` function for making `histogram` with `kde` plot, for plotting 4 junction"
						]
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"papermill": {
								"duration": 0.055598,
								"end_time": "2021-09-27T02:06:00.080523Z",
								"exception": false,
								"start_time": "2021-09-27T02:06:00.024925Z",
								"status": "completed"
							},
							"tags": []
						},
						"source": [
							"# Data Exploration"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.execute_input": "2021-09-27T02:06:00.191361Z",
								"iopub.status.busy": "2021-09-27T02:06:00.190579Z",
								"iopub.status.idle": "2021-09-27T02:06:00.193042Z",
								"shell.execute_reply": "2021-09-27T02:06:00.193565Z",
								"shell.execute_reply.started": "2021-09-27T02:02:46.853609Z"
							},
							"papermill": {
								"duration": 0.060773,
								"end_time": "2021-09-27T02:06:00.193738Z",
								"exception": false,
								"start_time": "2021-09-27T02:06:00.132965Z",
								"status": "completed"
							},
							"tags": []
						},
						"source": [
							"def make_hist(junction=1):\n",
							"    data = df[df['Junction'] == junction]\n",
							"    f, ax = plt.subplots(figsize=(17, 5))\n",
							"    ax = sns.histplot(data['Vehicles'], kde=True, stat='probability')\n",
							"    ax.set_title(f'Plot show the distribution of data in junction {junction}')\n",
							"    ax.grid(True, ls='-.', alpha=0.75)\n",
							"    plt.show()"
						],
						"outputs": [],
						"execution_count": 30
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.execute_input": "2021-09-27T02:06:00.300018Z",
								"iopub.status.busy": "2021-09-27T02:06:00.299365Z",
								"iopub.status.idle": "2021-09-27T02:06:00.812323Z",
								"shell.execute_reply": "2021-09-27T02:06:00.811708Z",
								"shell.execute_reply.started": "2021-09-27T02:02:46.859751Z"
							},
							"papermill": {
								"duration": 0.567196,
								"end_time": "2021-09-27T02:06:00.812474Z",
								"exception": false,
								"start_time": "2021-09-27T02:06:00.245278Z",
								"status": "completed"
							},
							"tags": []
						},
						"source": [
							"make_hist(1)"
						],
						"outputs": [],
						"execution_count": 31
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.execute_input": "2021-09-27T02:06:00.933695Z",
								"iopub.status.busy": "2021-09-27T02:06:00.933059Z",
								"iopub.status.idle": "2021-09-27T02:06:01.404636Z",
								"shell.execute_reply": "2021-09-27T02:06:01.405105Z",
								"shell.execute_reply.started": "2021-09-27T02:02:47.341494Z"
							},
							"papermill": {
								"duration": 0.530946,
								"end_time": "2021-09-27T02:06:01.40528Z",
								"exception": false,
								"start_time": "2021-09-27T02:06:00.874334Z",
								"status": "completed"
							},
							"tags": []
						},
						"source": [
							"make_hist(2)"
						],
						"outputs": [],
						"execution_count": 32
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.execute_input": "2021-09-27T02:06:01.520236Z",
								"iopub.status.busy": "2021-09-27T02:06:01.519549Z",
								"iopub.status.idle": "2021-09-27T02:06:02.327378Z",
								"shell.execute_reply": "2021-09-27T02:06:02.326746Z",
								"shell.execute_reply.started": "2021-09-27T02:02:47.774551Z"
							},
							"papermill": {
								"duration": 0.86736,
								"end_time": "2021-09-27T02:06:02.327534Z",
								"exception": false,
								"start_time": "2021-09-27T02:06:01.460174Z",
								"status": "completed"
							},
							"tags": []
						},
						"source": [
							"make_hist(3)"
						],
						"outputs": [],
						"execution_count": 33
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.execute_input": "2021-09-27T02:06:02.444377Z",
								"iopub.status.busy": "2021-09-27T02:06:02.443767Z",
								"iopub.status.idle": "2021-09-27T02:06:02.812246Z",
								"shell.execute_reply": "2021-09-27T02:06:02.812767Z",
								"shell.execute_reply.started": "2021-09-27T02:02:48.513654Z"
							},
							"papermill": {
								"duration": 0.429051,
								"end_time": "2021-09-27T02:06:02.812937Z",
								"exception": false,
								"start_time": "2021-09-27T02:06:02.383886Z",
								"status": "completed"
							},
							"tags": []
						},
						"source": [
							"make_hist(4)"
						],
						"outputs": [],
						"execution_count": 34
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"papermill": {
								"duration": 0.057041,
								"end_time": "2021-09-27T02:06:02.927628Z",
								"exception": false,
								"start_time": "2021-09-27T02:06:02.870587Z",
								"status": "completed"
							},
							"tags": []
						},
						"source": [
							"In 4 plot, its can show us that `Vehicles` in each junction is normal distribution with skew"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.execute_input": "2021-09-27T02:06:03.048476Z",
								"iopub.status.busy": "2021-09-27T02:06:03.047844Z",
								"iopub.status.idle": "2021-09-27T02:06:03.050791Z",
								"shell.execute_reply": "2021-09-27T02:06:03.051452Z",
								"shell.execute_reply.started": "2021-09-27T02:02:48.845847Z"
							},
							"papermill": {
								"duration": 0.066633,
								"end_time": "2021-09-27T02:06:03.05164Z",
								"exception": false,
								"start_time": "2021-09-27T02:06:02.985007Z",
								"status": "completed"
							},
							"tags": []
						},
						"source": [
							"df.tail(1).Year[0]"
						],
						"outputs": [],
						"execution_count": 35
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.execute_input": "2021-09-27T02:06:03.172033Z",
								"iopub.status.busy": "2021-09-27T02:06:03.171372Z",
								"iopub.status.idle": "2021-09-27T02:06:03.178175Z",
								"shell.execute_reply": "2021-09-27T02:06:03.17869Z",
								"shell.execute_reply.started": "2021-09-27T02:02:48.853269Z"
							},
							"papermill": {
								"duration": 0.06842,
								"end_time": "2021-09-27T02:06:03.178877Z",
								"exception": false,
								"start_time": "2021-09-27T02:06:03.110457Z",
								"status": "completed"
							},
							"tags": []
						},
						"source": [
							"def make_time_series_plot(junction=1):\n",
							"    f, ax = plt.subplots(figsize=(17, 5))\n",
							"    data=df[df.Junction == junction]\n",
							"    ax = sns.lineplot(data=data, y='Vehicles', x='DateTime', ax=ax)\n",
							"    start = data.head(1)\n",
							"    end = data.tail(1)\n",
							"    ax.set_title(f'Plot show amounts of Vehicles in junction {junction} from {start.Month[0]}-{start.Year[0]} to {end.Month[0]}-{end.Year[0]}', fontsize=15)\n",
							"    ax.grid(True, ls='-.', alpha=0.75)\n",
							"    plt.show()"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.execute_input": "2021-09-27T02:06:03.297537Z",
								"iopub.status.busy": "2021-09-27T02:06:03.296939Z",
								"iopub.status.idle": "2021-09-27T02:06:05.023012Z",
								"shell.execute_reply": "2021-09-27T02:06:05.023543Z",
								"shell.execute_reply.started": "2021-09-27T02:02:48.863378Z"
							},
							"papermill": {
								"duration": 1.787036,
								"end_time": "2021-09-27T02:06:05.023718Z",
								"exception": false,
								"start_time": "2021-09-27T02:06:03.236682Z",
								"status": "completed"
							},
							"tags": []
						},
						"source": [
							"make_time_series_plot(1)"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.execute_input": "2021-09-27T02:06:05.148203Z",
								"iopub.status.busy": "2021-09-27T02:06:05.147627Z",
								"iopub.status.idle": "2021-09-27T02:06:06.865222Z",
								"shell.execute_reply": "2021-09-27T02:06:06.865745Z",
								"shell.execute_reply.started": "2021-09-27T02:02:50.338883Z"
							},
							"papermill": {
								"duration": 1.781657,
								"end_time": "2021-09-27T02:06:06.865932Z",
								"exception": false,
								"start_time": "2021-09-27T02:06:05.084275Z",
								"status": "completed"
							},
							"tags": []
						},
						"source": [
							"make_time_series_plot(2)"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.execute_input": "2021-09-27T02:06:07.025318Z",
								"iopub.status.busy": "2021-09-27T02:06:07.024656Z",
								"iopub.status.idle": "2021-09-27T02:06:08.908442Z",
								"shell.execute_reply": "2021-09-27T02:06:08.908946Z",
								"shell.execute_reply.started": "2021-09-27T02:02:51.841703Z"
							},
							"papermill": {
								"duration": 1.974446,
								"end_time": "2021-09-27T02:06:08.909117Z",
								"exception": false,
								"start_time": "2021-09-27T02:06:06.934671Z",
								"status": "completed"
							},
							"tags": []
						},
						"source": [
							"make_time_series_plot(3)"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.execute_input": "2021-09-27T02:06:09.043682Z",
								"iopub.status.busy": "2021-09-27T02:06:09.043033Z",
								"iopub.status.idle": "2021-09-27T02:06:09.733327Z",
								"shell.execute_reply": "2021-09-27T02:06:09.733814Z",
								"shell.execute_reply.started": "2021-09-27T02:02:53.444085Z"
							},
							"papermill": {
								"duration": 0.758872,
								"end_time": "2021-09-27T02:06:09.733992Z",
								"exception": false,
								"start_time": "2021-09-27T02:06:08.97512Z",
								"status": "completed"
							},
							"tags": []
						},
						"source": [
							"make_time_series_plot(4)"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.execute_input": "2021-09-27T02:06:09.875023Z",
								"iopub.status.busy": "2021-09-27T02:06:09.874306Z",
								"iopub.status.idle": "2021-09-27T02:06:14.414462Z",
								"shell.execute_reply": "2021-09-27T02:06:14.415Z",
								"shell.execute_reply.started": "2021-09-27T02:02:54.034464Z"
							},
							"papermill": {
								"duration": 4.611812,
								"end_time": "2021-09-27T02:06:14.415176Z",
								"exception": false,
								"start_time": "2021-09-27T02:06:09.803364Z",
								"status": "completed"
							},
							"tags": []
						},
						"source": [
							"f, ax = plt.subplots(3, 4, figsize=(20, 10))\n",
							"\n",
							"for i, year in enumerate(range(2015, 2018)):\n",
							"  for j, junction in enumerate(range(1, 5)):\n",
							"    sns.lineplot(data=df[(df.Junction == junction) & (df.Year == year)], x='Month', y='Vehicles', ax=ax[i, j])\n",
							"    ax[i, j].grid(True, alpha=0.75, ls='-.')\n",
							"\n",
							"plt.xlabel('Year')\n",
							"plt.ylabel('Junction')\n",
							"f.suptitle('Line plot showing the pattern amounts of Vehicles by Year and by Junction', fontsize=20)\n",
							"plt.show()"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"papermill": {
								"duration": 0.074468,
								"end_time": "2021-09-27T02:06:14.565053Z",
								"exception": false,
								"start_time": "2021-09-27T02:06:14.490585Z",
								"status": "completed"
							},
							"tags": []
						},
						"source": [
							"**Normal data histogram**"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.execute_input": "2021-09-27T02:06:14.762756Z",
								"iopub.status.busy": "2021-09-27T02:06:14.758827Z",
								"iopub.status.idle": "2021-09-27T02:06:18.051688Z",
								"shell.execute_reply": "2021-09-27T02:06:18.05219Z",
								"shell.execute_reply.started": "2021-09-27T02:02:57.589376Z"
							},
							"papermill": {
								"duration": 3.413039,
								"end_time": "2021-09-27T02:06:18.052368Z",
								"exception": false,
								"start_time": "2021-09-27T02:06:14.639329Z",
								"status": "completed"
							},
							"tags": []
						},
						"source": [
							"f, axis = plt.subplots(3, 4, figsize=(20, 10))\n",
							"\n",
							"for i, year in enumerate(range(2015, 2018)):\n",
							"  for j, junction in enumerate(range(1, 5)):\n",
							"    sns.histplot(df[(df.Junction == junction) & (df.Year == year)]['Vehicles'], kde=True, ax=axis[i, j], stat='probability')\n",
							"    axis[i, j].grid(True, alpha=0.75, ls='-.')\n",
							"\n",
							"plt.xlabel('Year')\n",
							"plt.ylabel('Junction')\n",
							"f.suptitle('Histogram showing the distribution of Vehicles by Year and by Junction', fontsize=20)\n",
							"plt.show()"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"papermill": {
								"duration": 0.079894,
								"end_time": "2021-09-27T02:06:18.213165Z",
								"exception": false,
								"start_time": "2021-09-27T02:06:18.133271Z",
								"status": "completed"
							},
							"tags": []
						},
						"source": [
							"**Z Score data distribution and Histogram with Z Score Vehicles form Data**\n",
							"- Mean = 0\n",
							"- Standard Deviation = 1"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.execute_input": "2021-09-27T02:06:18.377253Z",
								"iopub.status.busy": "2021-09-27T02:06:18.376255Z",
								"iopub.status.idle": "2021-09-27T02:06:18.379323Z",
								"shell.execute_reply": "2021-09-27T02:06:18.378785Z",
								"shell.execute_reply.started": "2021-09-27T02:03:00.526267Z"
							},
							"papermill": {
								"duration": 0.086477,
								"end_time": "2021-09-27T02:06:18.379474Z",
								"exception": false,
								"start_time": "2021-09-27T02:06:18.292997Z",
								"status": "completed"
							},
							"tags": []
						},
						"source": [
							"standardization = lambda x: StandardScaler().fit_transform(x)"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.execute_input": "2021-09-27T02:06:18.542732Z",
								"iopub.status.busy": "2021-09-27T02:06:18.542072Z",
								"iopub.status.idle": "2021-09-27T02:06:18.556053Z",
								"shell.execute_reply": "2021-09-27T02:06:18.556594Z",
								"shell.execute_reply.started": "2021-09-27T02:03:00.532492Z"
							},
							"papermill": {
								"duration": 0.098039,
								"end_time": "2021-09-27T02:06:18.556764Z",
								"exception": false,
								"start_time": "2021-09-27T02:06:18.458725Z",
								"status": "completed"
							},
							"tags": []
						},
						"source": [
							"z_df = df.copy()\n",
							"z_df['Vehicles'] = standardization(z_df.Vehicles.values.reshape(-1, 1))\n",
							"z_df.head()"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.execute_input": "2021-09-27T02:06:18.720068Z",
								"iopub.status.busy": "2021-09-27T02:06:18.719429Z",
								"iopub.status.idle": "2021-09-27T02:06:22.094652Z",
								"shell.execute_reply": "2021-09-27T02:06:22.095143Z",
								"shell.execute_reply.started": "2021-09-27T02:03:00.555616Z"
							},
							"papermill": {
								"duration": 3.458718,
								"end_time": "2021-09-27T02:06:22.095322Z",
								"exception": false,
								"start_time": "2021-09-27T02:06:18.636604Z",
								"status": "completed"
							},
							"tags": []
						},
						"source": [
							"f, axis = plt.subplots(3, 4, figsize=(20, 10))\n",
							"\n",
							"for i, year in enumerate(range(2015, 2018)):\n",
							"  for j, junction in enumerate(range(1, 5)):\n",
							"    sns.histplot(z_df[(z_df.Junction == junction) & (z_df.Year == year)]['Vehicles'], kde=True, ax=axis[i, j], stat='probability')\n",
							"    axis[i, j].grid(True, alpha=0.75, ls='-.')\n",
							"    \n",
							"plt.xlabel('Year')\n",
							"plt.ylabel('Junction')\n",
							"f.suptitle('Histogram showing the distribution of Vehicles by Year and by Junction when data transfrom to Z Score', fontsize=20)\n",
							"plt.show()"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"papermill": {
								"duration": 0.085864,
								"end_time": "2021-09-27T02:06:22.26864Z",
								"exception": false,
								"start_time": "2021-09-27T02:06:22.182776Z",
								"status": "completed"
							},
							"tags": []
						},
						"source": [
							"**Boxplot for Vehicles**\n",
							"- In boxplot, we can see a lot of outliers (those which is the dot)"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.execute_input": "2021-09-27T02:06:22.485469Z",
								"iopub.status.busy": "2021-09-27T02:06:22.459515Z",
								"iopub.status.idle": "2021-09-27T02:06:23.898442Z",
								"shell.execute_reply": "2021-09-27T02:06:23.8979Z",
								"shell.execute_reply.started": "2021-09-27T02:03:03.616377Z"
							},
							"papermill": {
								"duration": 1.543569,
								"end_time": "2021-09-27T02:06:23.898578Z",
								"exception": false,
								"start_time": "2021-09-27T02:06:22.355009Z",
								"status": "completed"
							},
							"tags": []
						},
						"source": [
							"f, axis = plt.subplots(3, 4, figsize=(20, 10))\n",
							"\n",
							"for i, year in zip(range(3), range(2015, 2018)):\n",
							"  for j, junction in zip(range(4), range(1, 5)):\n",
							"    sns.boxplot(x=df[(df.Junction == junction) & (df.Year == year)]['Vehicles'], ax=axis[i, j])\n",
							"    axis[i, j].grid(True, alpha=0.75, ls='-.')\n",
							"\n",
							"plt.xlabel('Year')\n",
							"plt.ylabel('Junction')\n",
							"f.suptitle('Boxplot showing the range of amounts Vehicles by Year and by Junction', fontsize=20)\n",
							"plt.show()"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"papermill": {
								"duration": 0.087347,
								"end_time": "2021-09-27T02:06:24.07469Z",
								"exception": false,
								"start_time": "2021-09-27T02:06:23.987343Z",
								"status": "completed"
							},
							"tags": []
						},
						"source": [
							"**Heatmap about data attributes**\n",
							"- The value closer to 1 or -1 is best correlation to each other.\n",
							"- As close as to -1, that pair of attribute is more **negative** correlation.\n",
							"- As close as to 1, that pair of attribute is more **positive** correlation.\n",
							"- As close as to 0, that pair of attribute is **not** correlating to each other."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.execute_input": "2021-09-27T02:06:24.256785Z",
								"iopub.status.busy": "2021-09-27T02:06:24.256049Z",
								"iopub.status.idle": "2021-09-27T02:06:24.700361Z",
								"shell.execute_reply": "2021-09-27T02:06:24.69984Z",
								"shell.execute_reply.started": "2021-09-27T02:03:04.948537Z"
							},
							"papermill": {
								"duration": 0.537974,
								"end_time": "2021-09-27T02:06:24.700542Z",
								"exception": false,
								"start_time": "2021-09-27T02:06:24.162568Z",
								"status": "completed"
							},
							"tags": []
						},
						"source": [
							"corr = df.corr()\n",
							"f, ax = plt.subplots(figsize=(16, 7))\n",
							"sns.heatmap(corr, annot=True, fmt='.2f', vmin=-1, vmax=1, square=True, linewidths=1)\n",
							"f.suptitle('Heatmap showing the correlation of data attributes', fontsize=20)\n",
							"plt.show()"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.execute_input": "2021-09-27T02:06:24.887755Z",
								"iopub.status.busy": "2021-09-27T02:06:24.887122Z",
								"iopub.status.idle": "2021-09-27T02:06:24.890256Z",
								"shell.execute_reply": "2021-09-27T02:06:24.889627Z",
								"shell.execute_reply.started": "2021-09-27T02:03:05.363888Z"
							},
							"papermill": {
								"duration": 0.098834,
								"end_time": "2021-09-27T02:06:24.890424Z",
								"exception": false,
								"start_time": "2021-09-27T02:06:24.79159Z",
								"status": "completed"
							},
							"tags": []
						},
						"source": [
							"def get_list_data(dataf, drop=[]):\n",
							"  # drop cột DateTime ở các data\n",
							"  for i in drop:\n",
							"    try:\n",
							"      dataf.drop(drop, axis=1, inplace=True)\n",
							"    except:\n",
							"      print(f\"{i} doesn't has in data\")\n",
							"  # create a list of dataframe has the data in that junction and remove the junction identify\n",
							"  dataf = [dataf[dataf.Junction == i].drop('Junction', axis=1) for i in range(5)]\n",
							"  return dataf"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.execute_input": "2021-09-27T02:06:25.073541Z",
								"iopub.status.busy": "2021-09-27T02:06:25.072832Z",
								"iopub.status.idle": "2021-09-27T02:06:25.095049Z",
								"shell.execute_reply": "2021-09-27T02:06:25.095568Z",
								"shell.execute_reply.started": "2021-09-27T02:03:05.371336Z"
							},
							"papermill": {
								"duration": 0.116167,
								"end_time": "2021-09-27T02:06:25.095745Z",
								"exception": false,
								"start_time": "2021-09-27T02:06:24.979578Z",
								"status": "completed"
							},
							"tags": []
						},
						"source": [
							"data = get_list_data(df)\n",
							"for i in data:\n",
							"    print(i.head(1))"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.execute_input": "2021-09-27T02:06:25.277501Z",
								"iopub.status.busy": "2021-09-27T02:06:25.27688Z",
								"iopub.status.idle": "2021-09-27T02:06:26.128379Z",
								"shell.execute_reply": "2021-09-27T02:06:26.128912Z",
								"shell.execute_reply.started": "2021-09-27T02:03:05.402526Z"
							},
							"papermill": {
								"duration": 0.943889,
								"end_time": "2021-09-27T02:06:26.12908Z",
								"exception": false,
								"start_time": "2021-09-27T02:06:25.185191Z",
								"status": "completed"
							},
							"tags": []
						},
						"source": [
							"f, ax = plt.subplots(nrows=4, figsize=(20, 15))\n",
							"for i in range(4):\n",
							"    ax[i].plot(data[i + 1].resample('D').sum().Vehicles, label=f'Vehicles of {i + 1} Junction', lw=2)\n",
							"    ax[i].grid(True, alpha=0.75, lw=1, ls='-.')\n",
							"    ax[i].set_title(f'Junction {i + 1}')\n",
							"f.suptitle('Plots show amounts of Vehicles by Junction, each Junction by day (24h)', fontsize=20);"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.execute_input": "2021-09-27T02:06:26.329973Z",
								"iopub.status.busy": "2021-09-27T02:06:26.329337Z",
								"iopub.status.idle": "2021-09-27T02:06:27.154102Z",
								"shell.execute_reply": "2021-09-27T02:06:27.154631Z",
								"shell.execute_reply.started": "2021-09-27T02:03:06.147816Z"
							},
							"papermill": {
								"duration": 0.926428,
								"end_time": "2021-09-27T02:06:27.154804Z",
								"exception": false,
								"start_time": "2021-09-27T02:06:26.228376Z",
								"status": "completed"
							},
							"tags": []
						},
						"source": [
							"f, ax = plt.subplots(nrows=4, figsize=(20, 15))\n",
							"for i in range(4):\n",
							"    ax[i].plot(data[i + 1].resample('M').sum().Vehicles, label=f'Vehicles of {i + 1} Junction', lw=2)\n",
							"    ax[i].grid(True, alpha=0.75, lw=1, ls='-.')\n",
							"    ax[i].set_ylabel('Số lượng', fontsize=15)\n",
							"    ax[i].set_title(f'Junction {i + 1}')\n",
							"f.suptitle('Plots show amounts of Vehicles by Junction, each Junction by Month', fontsize=20);"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.execute_input": "2021-09-27T02:06:27.406156Z",
								"iopub.status.busy": "2021-09-27T02:06:27.387546Z",
								"iopub.status.idle": "2021-09-27T02:06:28.325088Z",
								"shell.execute_reply": "2021-09-27T02:06:28.325614Z",
								"shell.execute_reply.started": "2021-09-27T02:03:06.874379Z"
							},
							"papermill": {
								"duration": 1.066562,
								"end_time": "2021-09-27T02:06:28.325788Z",
								"exception": false,
								"start_time": "2021-09-27T02:06:27.259226Z",
								"status": "completed"
							},
							"tags": []
						},
						"source": [
							"f, ax = plt.subplots(nrows=4, figsize=(22, 20))\n",
							"for i in range(4):\n",
							"    ax[i].plot(data[i + 1].resample('12H').sum().Vehicles, label=f'Vehicles of {i + 1} Junction', lw=1)\n",
							"    ax[i].grid(True, alpha=0.75, lw=1, ls='-.')\n",
							"    ax[i].set_title(f'Junction {i + 1}')\n",
							"f.suptitle('Plots show amounts of Vehicles by Junction, each Junction by haft day(12h)', fontsize=20);"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.execute_input": "2021-09-27T02:06:28.604431Z",
								"iopub.status.busy": "2021-09-27T02:06:28.599221Z",
								"iopub.status.idle": "2021-09-27T02:06:29.45089Z",
								"shell.execute_reply": "2021-09-27T02:06:29.45137Z",
								"shell.execute_reply.started": "2021-09-27T02:03:07.722342Z"
							},
							"papermill": {
								"duration": 1.006352,
								"end_time": "2021-09-27T02:06:29.451554Z",
								"exception": false,
								"start_time": "2021-09-27T02:06:28.445202Z",
								"status": "completed"
							},
							"tags": []
						},
						"source": [
							"f, ax = plt.subplots(nrows=4, figsize=(22, 15))\n",
							"for i in range(4):\n",
							"    ax[i].plot(data[i + 1].resample('6H').sum().Vehicles, label=f'Vehicles of {i + 1} Junction', lw=2)\n",
							"    ax[i].grid(True, alpha=0.75, lw=1, ls='-.')\n",
							"    ax[i].set_title(f'Junction {i + 1}')\n",
							"f.suptitle('Plots show amounts of Vehicles by Junction, each Junction by 1/4 day (6h)', fontsize=20);"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.execute_input": "2021-09-27T02:06:29.732894Z",
								"iopub.status.busy": "2021-09-27T02:06:29.732207Z",
								"iopub.status.idle": "2021-09-27T02:06:30.241219Z",
								"shell.execute_reply": "2021-09-27T02:06:30.240689Z",
								"shell.execute_reply.started": "2021-09-27T02:03:08.512484Z"
							},
							"papermill": {
								"duration": 0.662558,
								"end_time": "2021-09-27T02:06:30.241351Z",
								"exception": false,
								"start_time": "2021-09-27T02:06:29.578793Z",
								"status": "completed"
							},
							"tags": []
						},
						"source": [
							"f, ax = plt.subplots(figsize=(17, 5))\n",
							"foo = data[1][:400]\n",
							"foo.Vehicles.plot(lw=3)\n",
							"foo.Vehicles.rolling('D').mean().plot(lw=3)\n",
							"foo.Vehicles.rolling('D').std().plot(lw=3)\n",
							"plt.legend(['Junction 1', 'Rolling Mean A Day', 'Rolling Std A Day'])\n",
							"plt.grid(True, alpha=0.75, ls='-.')\n",
							"plt.title('Plot show amounts of Vehicles first 400 hours', fontsize=20)\n",
							"plt.show()"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.execute_input": "2021-09-27T02:06:30.528207Z",
								"iopub.status.busy": "2021-09-27T02:06:30.520663Z",
								"iopub.status.idle": "2021-09-27T02:06:30.842928Z",
								"shell.execute_reply": "2021-09-27T02:06:30.843429Z",
								"shell.execute_reply.started": "2021-09-27T02:03:08.999699Z"
							},
							"papermill": {
								"duration": 0.471671,
								"end_time": "2021-09-27T02:06:30.843598Z",
								"exception": false,
								"start_time": "2021-09-27T02:06:30.371927Z",
								"status": "completed"
							},
							"tags": []
						},
						"source": [
							"f, ax = plt.subplots(figsize=(17, 5))\n",
							"foo = data[2][:400]\n",
							"foo.Vehicles.plot(lw=3)\n",
							"foo.Vehicles.rolling('D').mean().plot(lw=3)\n",
							"foo.Vehicles.rolling('D').std().plot(lw=3)\n",
							"plt.legend(['Junction 2', 'Rolling Mean A Day', 'Rolling Std A Day'])\n",
							"plt.grid(True, alpha=0.75, ls='-.')\n",
							"plt.title('Plot show amounts of Vehicles first 400 hours', fontsize=20)\n",
							"plt.show()"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.execute_input": "2021-09-27T02:06:31.189988Z",
								"iopub.status.busy": "2021-09-27T02:06:31.180323Z",
								"iopub.status.idle": "2021-09-27T02:06:31.45271Z",
								"shell.execute_reply": "2021-09-27T02:06:31.452009Z",
								"shell.execute_reply.started": "2021-09-27T02:03:09.311903Z"
							},
							"papermill": {
								"duration": 0.472874,
								"end_time": "2021-09-27T02:06:31.452855Z",
								"exception": false,
								"start_time": "2021-09-27T02:06:30.979981Z",
								"status": "completed"
							},
							"tags": []
						},
						"source": [
							"f, ax = plt.subplots(figsize=(17, 5))\n",
							"foo = data[3][:400]\n",
							"foo.Vehicles.plot(lw=3)\n",
							"foo.Vehicles.rolling('D').mean().plot(lw=3)\n",
							"foo.Vehicles.rolling('D').std().plot(lw=3)\n",
							"plt.legend(['Junction 3', 'Rolling Mean A Day', 'Rolling Std A Day'])\n",
							"plt.grid(True, alpha=0.75, ls='-.')\n",
							"plt.title('Plot show amounts of Vehicles first 400 hours', fontsize=20)\n",
							"plt.show()"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.execute_input": "2021-09-27T02:06:31.783062Z",
								"iopub.status.busy": "2021-09-27T02:06:31.755776Z",
								"iopub.status.idle": "2021-09-27T02:06:32.061619Z",
								"shell.execute_reply": "2021-09-27T02:06:32.062101Z",
								"shell.execute_reply.started": "2021-09-27T02:03:09.616892Z"
							},
							"papermill": {
								"duration": 0.471597,
								"end_time": "2021-09-27T02:06:32.062265Z",
								"exception": false,
								"start_time": "2021-09-27T02:06:31.590668Z",
								"status": "completed"
							},
							"tags": []
						},
						"source": [
							"f, ax = plt.subplots(figsize=(17, 5))\n",
							"foo = data[4][:400]\n",
							"foo.Vehicles.plot(lw=3)\n",
							"foo.Vehicles.rolling('D').mean().plot(lw=3)\n",
							"foo.Vehicles.rolling('D').std().plot(lw=3)\n",
							"plt.legend(['Junction 4', 'Rolling Mean A Day', 'Rolling Std A Day'])\n",
							"plt.grid(True, alpha=0.75, ls='-.')\n",
							"plt.title('Plot show amounts of Vehicles first 400 hours', fontsize=20)\n",
							"plt.show()"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"papermill": {
								"duration": 0.154253,
								"end_time": "2021-09-27T02:06:32.360003Z",
								"exception": false,
								"start_time": "2021-09-27T02:06:32.20575Z",
								"status": "completed"
							},
							"tags": []
						},
						"source": [
							"**Auto correlation plot**\n",
							"- The data lie outside the blue has 95% effect to data"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.execute_input": "2021-09-27T02:06:32.650486Z",
								"iopub.status.busy": "2021-09-27T02:06:32.649795Z",
								"iopub.status.idle": "2021-09-27T02:06:32.652466Z",
								"shell.execute_reply": "2021-09-27T02:06:32.651875Z",
								"shell.execute_reply.started": "2021-09-27T02:03:09.912073Z"
							},
							"papermill": {
								"duration": 0.147366,
								"end_time": "2021-09-27T02:06:32.652595Z",
								"exception": false,
								"start_time": "2021-09-27T02:06:32.505229Z",
								"status": "completed"
							},
							"tags": []
						},
						"source": [
							"def make_autocorrelation(junction=1):\n",
							"    f, ax = plt.subplots(figsize=(17, 6), nrows=2)\n",
							"    plot_acf(data[junction].Vehicles, title=f\"Autocorrelation of amounts of Vehicles in Junction {junction}\", ax=ax[0])\n",
							"    plot_pacf(data[junction].Vehicles, title=f\"Partial Autocorrelation of amounts of Vehicles Junction {junction}\", ax=ax[1])\n",
							"    plt.show()"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.execute_input": "2021-09-27T02:06:32.977524Z",
								"iopub.status.busy": "2021-09-27T02:06:32.976783Z",
								"iopub.status.idle": "2021-09-27T02:06:33.396917Z",
								"shell.execute_reply": "2021-09-27T02:06:33.397421Z",
								"shell.execute_reply.started": "2021-09-27T02:03:09.917794Z"
							},
							"papermill": {
								"duration": 0.603404,
								"end_time": "2021-09-27T02:06:33.397595Z",
								"exception": false,
								"start_time": "2021-09-27T02:06:32.794191Z",
								"status": "completed"
							},
							"tags": []
						},
						"source": [
							"make_autocorrelation(1)"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.execute_input": "2021-09-27T02:06:33.72775Z",
								"iopub.status.busy": "2021-09-27T02:06:33.727062Z",
								"iopub.status.idle": "2021-09-27T02:06:34.132881Z",
								"shell.execute_reply": "2021-09-27T02:06:34.132238Z",
								"shell.execute_reply.started": "2021-09-27T02:03:10.340018Z"
							},
							"papermill": {
								"duration": 0.594389,
								"end_time": "2021-09-27T02:06:34.133016Z",
								"exception": false,
								"start_time": "2021-09-27T02:06:33.538627Z",
								"status": "completed"
							},
							"tags": []
						},
						"source": [
							"make_autocorrelation(2)"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.execute_input": "2021-09-27T02:06:34.437618Z",
								"iopub.status.busy": "2021-09-27T02:06:34.436969Z",
								"iopub.status.idle": "2021-09-27T02:06:34.86056Z",
								"shell.execute_reply": "2021-09-27T02:06:34.861082Z",
								"shell.execute_reply.started": "2021-09-27T02:03:10.749448Z"
							},
							"papermill": {
								"duration": 0.580242,
								"end_time": "2021-09-27T02:06:34.861248Z",
								"exception": false,
								"start_time": "2021-09-27T02:06:34.281006Z",
								"status": "completed"
							},
							"tags": []
						},
						"source": [
							"make_autocorrelation(3)"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.execute_input": "2021-09-27T02:06:35.150484Z",
								"iopub.status.busy": "2021-09-27T02:06:35.149803Z",
								"iopub.status.idle": "2021-09-27T02:06:35.524555Z",
								"shell.execute_reply": "2021-09-27T02:06:35.525039Z",
								"shell.execute_reply.started": "2021-09-27T02:03:11.156341Z"
							},
							"papermill": {
								"duration": 0.521971,
								"end_time": "2021-09-27T02:06:35.525205Z",
								"exception": false,
								"start_time": "2021-09-27T02:06:35.003234Z",
								"status": "completed"
							},
							"tags": []
						},
						"source": [
							"make_autocorrelation(4)"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"papermill": {
								"duration": 0.143823,
								"end_time": "2021-09-27T02:06:35.818591Z",
								"exception": false,
								"start_time": "2021-09-27T02:06:35.674768Z",
								"status": "completed"
							},
							"tags": []
						},
						"source": [
							"- Month has **negative** correlation with Year\n",
							"- The correlation of Vehicles and Year is equal to Vehicles and Hour\n",
							"\n",
							"**=> Can drop Year or Hour because it's the same**"
						]
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"papermill": {
								"duration": 0.144058,
								"end_time": "2021-09-27T02:06:36.107112Z",
								"exception": false,
								"start_time": "2021-09-27T02:06:35.963054Z",
								"status": "completed"
							},
							"tags": []
						},
						"source": [
							"# Modeling"
						]
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"papermill": {
								"duration": 0.143333,
								"end_time": "2021-09-27T02:06:36.39535Z",
								"exception": false,
								"start_time": "2021-09-27T02:06:36.252017Z",
								"status": "completed"
							},
							"tags": []
						},
						"source": [
							"**Create a make metrics function to return R² Score and RMSE from a list of models**"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.execute_input": "2021-09-27T02:06:36.685798Z",
								"iopub.status.busy": "2021-09-27T02:06:36.685144Z",
								"iopub.status.idle": "2021-09-27T02:06:36.690916Z",
								"shell.execute_reply": "2021-09-27T02:06:36.691427Z",
								"shell.execute_reply.started": "2021-09-27T02:04:52.00464Z"
							},
							"papermill": {
								"duration": 0.152724,
								"end_time": "2021-09-27T02:06:36.691615Z",
								"exception": false,
								"start_time": "2021-09-27T02:06:36.538891Z",
								"status": "completed"
							},
							"tags": []
						},
						"source": [
							"def make_metrics(models):\n",
							"    data = {\n",
							"        'name': [model.name for model in models[1:]],\n",
							"        'r2': [model.r2 for model in models[1:]],\n",
							"        'rmse': [model.rmse for model in models[1:]]\n",
							"    }\n",
							"    data['name'] = 'average R2 and sum RMSE'\n",
							"    data['r2'].append(np.mean(data['r2']))\n",
							"    data['rmse'].append(np.sum(data['rmse']))\n",
							"    return pd.DataFrame(data)"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"papermill": {
								"duration": 0.143552,
								"end_time": "2021-09-27T02:06:36.97909Z",
								"exception": false,
								"start_time": "2021-09-27T02:06:36.835538Z",
								"status": "completed"
							},
							"tags": []
						},
						"source": [
							"**Create a function to create a new dataset**"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.execute_input": "2021-09-27T02:06:37.270955Z",
								"iopub.status.busy": "2021-09-27T02:06:37.270265Z",
								"iopub.status.idle": "2021-09-27T02:06:37.298625Z",
								"shell.execute_reply": "2021-09-27T02:06:37.297915Z",
								"shell.execute_reply.started": "2021-09-27T02:04:54.964928Z"
							},
							"papermill": {
								"duration": 0.175677,
								"end_time": "2021-09-27T02:06:37.298826Z",
								"exception": false,
								"start_time": "2021-09-27T02:06:37.123149Z",
								"status": "completed"
							},
							"tags": []
						},
						"source": [
							"z_data = get_list_data(z_df)\n",
							"for i in z_data:\n",
							"    print(i.head(1))"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"papermill": {
								"duration": 0.143707,
								"end_time": "2021-09-27T02:06:37.586928Z",
								"exception": false,
								"start_time": "2021-09-27T02:06:37.443221Z",
								"status": "completed"
							},
							"tags": []
						},
						"source": [
							"**Create a class for a frame for machine learning model**"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.execute_input": "2021-09-27T02:06:37.894088Z",
								"iopub.status.busy": "2021-09-27T02:06:37.893186Z",
								"iopub.status.idle": "2021-09-27T02:06:37.895749Z",
								"shell.execute_reply": "2021-09-27T02:06:37.895158Z",
								"shell.execute_reply.started": "2021-09-27T02:04:56.012173Z"
							},
							"papermill": {
								"duration": 0.164037,
								"end_time": "2021-09-27T02:06:37.895889Z",
								"exception": false,
								"start_time": "2021-09-27T02:06:37.731852Z",
								"status": "completed"
							},
							"tags": []
						},
						"source": [
							"class Model:\n",
							"  def __init__(self, name, data, predict_features, test_size, ml_model):\n",
							"    self.name = name\n",
							"    self.data = data\n",
							"    self.predict_features = predict_features\n",
							"    self.is_trained = False\n",
							"    self.test_size = test_size\n",
							"    self.ml_model = ml_model\n",
							"    self.do_things()\n",
							"\n",
							"  def cal_rmse(self):\n",
							"    self.rmse = mean_squared_error(self.ytest, self.ypredict, squared=False)\n",
							"    return self.rmse\n",
							"\n",
							"  def prequisite(self, test_size):\n",
							"    self.features = [i for i in self.data.columns if i != self.predict_features]\n",
							"    self.X = self.data[self.features].values\n",
							"    self.y = self.data[self.predict_features].values\n",
							"    self.Xtrain, self.Xtest, self.ytrain, self.ytest = train_test_split(self.X, self.y, test_size=test_size)\n",
							"    return None\n",
							"\n",
							"  def fit(self):\n",
							"    self.is_trained = True\n",
							"    self.ml_model.fit(self.Xtrain, self.ytrain)\n",
							"    self.ypredict = self.ml_model.predict(self.Xtest)\n",
							"    return self.ml_model\n",
							"\n",
							"  def cal_r2_score(self):\n",
							"    self.r2 = r2_score(self.ytest, self.ypredict)\n",
							"    return self.r2\n",
							"\n",
							"  def do_things(self) -> None:\n",
							"    self.prequisite(self.test_size)\n",
							"    self.fit()\n",
							"    self.cal_rmse()\n",
							"    self.cal_r2_score()\n",
							"    return None\n",
							"\n",
							"  def feature_importances(self, ax) -> None:\n",
							"    feature_importances = self.ml_model.feature_importances_\n",
							"    index = lag_models[1].features\n",
							"    data = pd.DataFrame(pd.Series(feature_importances, index=index).nlargest(10)).reset_index()\n",
							"    data.columns = ['Features', 'Value']\n",
							"    g = sns.barplot(data=data, x='Features', y='Value', ax=ax)\n",
							"    for p in g.patches:\n",
							"        ax.annotate(\n",
							"            format(p.get_height(), '.2f'),\n",
							"            (p.get_x() + p.get_width() / 2, p.get_height() + 0.02),\n",
							"            ha='center', va='center', weight='bold', fontsize=9\n",
							"        )\n",
							"    ax.set_title(f'Plot of {self.name}', fontsize=12)\n",
							"    ax.grid(True, ls='-.', alpha=0.7)\n",
							"    ax.set_ylim(0, 1)\n",
							"\n",
							"  def __repr__(self) -> str:\n",
							"    if not self.is_trained:\n",
							"      return f'<{self.name}> (is not trained yet)>'\n",
							"    return f'<({self.name}: [R² Score: {self.r2}], [RMSE: {self.rmse}])>'"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"papermill": {
								"duration": 0.145126,
								"end_time": "2021-09-27T02:06:38.185078Z",
								"exception": false,
								"start_time": "2021-09-27T02:06:38.039952Z",
								"status": "completed"
							},
							"tags": []
						},
						"source": [
							"**Training models for 4 junction with normal data**"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.execute_input": "2021-09-27T02:06:38.479722Z",
								"iopub.status.busy": "2021-09-27T02:06:38.479066Z",
								"iopub.status.idle": "2021-09-27T02:06:44.299646Z",
								"shell.execute_reply": "2021-09-27T02:06:44.299112Z",
								"shell.execute_reply.started": "2021-09-27T02:04:57.510115Z"
							},
							"papermill": {
								"duration": 5.969361,
								"end_time": "2021-09-27T02:06:44.29979Z",
								"exception": false,
								"start_time": "2021-09-27T02:06:38.330429Z",
								"status": "completed"
							},
							"tags": []
						},
						"source": [
							"models = [None]\n",
							"for i in range(1, 5):\n",
							"    models += [\n",
							"        Model(\n",
							"            ml_model=RandomForestRegressor(),\n",
							"            name=f'Dataset of junction {i}',\n",
							"            data=data[i],\n",
							"            predict_features='Vehicles',\n",
							"            test_size=1/4\n",
							"        )\n",
							"    ]\n",
							"    \n",
							"make_metrics(models)"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"papermill": {
								"duration": 0.145728,
								"end_time": "2021-09-27T02:06:44.592784Z",
								"exception": false,
								"start_time": "2021-09-27T02:06:44.447056Z",
								"status": "completed"
							},
							"tags": []
						},
						"source": [
							"**Training models for 4 junction with Z Score Normalization**"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.execute_input": "2021-09-27T02:06:44.892017Z",
								"iopub.status.busy": "2021-09-27T02:06:44.890907Z",
								"iopub.status.idle": "2021-09-27T02:06:50.709817Z",
								"shell.execute_reply": "2021-09-27T02:06:50.709284Z",
								"shell.execute_reply.started": "2021-09-27T02:05:03.190442Z"
							},
							"papermill": {
								"duration": 5.972284,
								"end_time": "2021-09-27T02:06:50.709959Z",
								"exception": false,
								"start_time": "2021-09-27T02:06:44.737675Z",
								"status": "completed"
							},
							"tags": []
						},
						"source": [
							"z_models = [None]\n",
							"for i in range(1, 5):\n",
							"    z_models += [\n",
							"        Model(\n",
							"            ml_model=RandomForestRegressor(),\n",
							"            name=f'Dataset of junction {i}',\n",
							"            data=z_data[i],\n",
							"            predict_features='Vehicles',\n",
							"            test_size=1/4\n",
							"        )\n",
							"    ]\n",
							"\n",
							"make_metrics(z_models)"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"papermill": {
								"duration": 0.145515,
								"end_time": "2021-09-27T02:06:51.002193Z",
								"exception": false,
								"start_time": "2021-09-27T02:06:50.856678Z",
								"status": "completed"
							},
							"tags": []
						},
						"source": [
							"**Create lag data**"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.execute_input": "2021-09-27T02:06:51.296889Z",
								"iopub.status.busy": "2021-09-27T02:06:51.296245Z",
								"iopub.status.idle": "2021-09-27T02:06:51.323946Z",
								"shell.execute_reply": "2021-09-27T02:06:51.324396Z",
								"shell.execute_reply.started": "2021-09-27T02:05:08.991357Z"
							},
							"papermill": {
								"duration": 0.175929,
								"end_time": "2021-09-27T02:06:51.324582Z",
								"exception": false,
								"start_time": "2021-09-27T02:06:51.148653Z",
								"status": "completed"
							},
							"tags": []
						},
						"source": [
							"lag_df = df.copy()\n",
							"for i in range(1, 3):\n",
							"    lag_df[f'Vehicles_lag_{i}'] = df.Vehicles.shift(i)\n",
							"\n",
							"# drop all rows with nan, because lag data cause nan\n",
							"lag_df.dropna(inplace=True)\n",
							"lag_df.head()"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.execute_input": "2021-09-27T02:06:51.620081Z",
								"iopub.status.busy": "2021-09-27T02:06:51.619438Z",
								"iopub.status.idle": "2021-09-27T02:06:51.650578Z",
								"shell.execute_reply": "2021-09-27T02:06:51.649908Z",
								"shell.execute_reply.started": "2021-09-27T02:05:09.024464Z"
							},
							"papermill": {
								"duration": 0.180148,
								"end_time": "2021-09-27T02:06:51.650718Z",
								"exception": false,
								"start_time": "2021-09-27T02:06:51.47057Z",
								"status": "completed"
							},
							"tags": []
						},
						"source": [
							"lag_data = get_list_data(lag_df, drop=['Year'])\n",
							"for i in lag_data:\n",
							"    print(i.head(1))"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"papermill": {
								"duration": 0.145334,
								"end_time": "2021-09-27T02:06:51.943033Z",
								"exception": false,
								"start_time": "2021-09-27T02:06:51.797699Z",
								"status": "completed"
							},
							"tags": []
						},
						"source": [
							"**Lag data is appropriate for time series data, use for create the auto correlation**"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.execute_input": "2021-09-27T02:06:52.243389Z",
								"iopub.status.busy": "2021-09-27T02:06:52.242739Z",
								"iopub.status.idle": "2021-09-27T02:07:00.165944Z",
								"shell.execute_reply": "2021-09-27T02:07:00.166413Z",
								"shell.execute_reply.started": "2021-09-27T02:05:09.065416Z"
							},
							"papermill": {
								"duration": 8.077512,
								"end_time": "2021-09-27T02:07:00.166588Z",
								"exception": false,
								"start_time": "2021-09-27T02:06:52.089076Z",
								"status": "completed"
							},
							"tags": []
						},
						"source": [
							"lag_models = [None]\n",
							"for i in range(1, 5):\n",
							"    lag_models += [\n",
							"        Model(\n",
							"            ml_model=RandomForestRegressor(),\n",
							"            name=f'Dataset of junction {i} with lag data',\n",
							"            data=lag_data[i],\n",
							"            predict_features='Vehicles',\n",
							"            test_size=1/3\n",
							"        )\n",
							"    ]\n",
							"\n",
							"make_metrics(lag_models)"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"papermill": {
								"duration": 0.147662,
								"end_time": "2021-09-27T02:07:00.463291Z",
								"exception": false,
								"start_time": "2021-09-27T02:07:00.315629Z",
								"status": "completed"
							},
							"tags": []
						},
						"source": [
							"**Feature importances of a model**\n",
							"\n",
							"*The correlate value as close as 1 is best*"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.execute_input": "2021-09-27T02:07:00.760246Z",
								"iopub.status.busy": "2021-09-27T02:07:00.75964Z",
								"iopub.status.idle": "2021-09-27T02:07:01.66442Z",
								"shell.execute_reply": "2021-09-27T02:07:01.664913Z",
								"shell.execute_reply.started": "2021-09-27T02:05:16.949911Z"
							},
							"papermill": {
								"duration": 1.054527,
								"end_time": "2021-09-27T02:07:01.665081Z",
								"exception": false,
								"start_time": "2021-09-27T02:07:00.610554Z",
								"status": "completed"
							},
							"tags": []
						},
						"source": [
							"f, ax = plt.subplots(nrows=2, ncols=2, figsize=(16, 8))\n",
							"k = 1\n",
							"for i in range(2):\n",
							"    for j in range(2):\n",
							"        lag_models[k].feature_importances(ax[i, j])\n",
							"        k += 1\n",
							"f.suptitle('Plots show how features in each dataset correlating to each model', fontsize=15, fontweight='bold')        \n",
							"f.tight_layout()"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"papermill": {
								"duration": 0.148401,
								"end_time": "2021-09-27T02:07:01.968348Z",
								"exception": false,
								"start_time": "2021-09-27T02:07:01.819947Z",
								"status": "completed"
							},
							"tags": []
						},
						"source": [
							"**Predict for next 4 months**\n",
							"\n",
							"I predict for each Junction separately. I use previous prediction amounts of Vehicles for predicting next amounts of Vehicles."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"execution": {
								"iopub.execute_input": "2021-09-27T02:07:02.279354Z",
								"iopub.status.busy": "2021-09-27T02:07:02.278651Z",
								"iopub.status.idle": "2021-09-27T02:09:39.012081Z",
								"shell.execute_reply": "2021-09-27T02:09:39.012629Z"
							},
							"papermill": {
								"duration": 156.894673,
								"end_time": "2021-09-27T02:09:39.012827Z",
								"exception": false,
								"start_time": "2021-09-27T02:07:02.118154Z",
								"status": "completed"
							},
							"tags": []
						},
						"source": [
							"for junction in range(1, 5):\n",
							"    cur_time = lag_data[junction].tail(1).index[0] # get the current time, the last time of that dataset\n",
							"    end_time = pd.Timestamp(2017, 11, 1, 0, 0, 0) # the end time after 4 months that we want to predict\n",
							"    new_data = lag_data[junction].copy() # create a copy of dataset with that junction\n",
							"    features = lag_models[junction].features # get features of each models in that junction\n",
							"    while cur_time != end_time:\n",
							"        last = new_data.tail(1).copy() # get the last row of dataset, just make a copy!\n",
							"        new_data = pd.concat([new_data, last]) # concatenate the copy dataset with it's last row\n",
							"        for i in range(1, 3): # create lag data\n",
							"            new_data[f'Vehicles_lag_{i}'] = new_data.Vehicles.shift(i) # shift by periods i\n",
							"        new_data.iloc[len(new_data) - 1, [1, 2, 3]] = [cur_time.month, cur_time.day, cur_time.hour] # assign value for those columns\n",
							"        last = new_data[features].tail(1).values # create a new last data that drop all nan\n",
							"        new_data.iloc[len(new_data) - 1, 0] = round(lag_models[1].ml_model.predict(last)[0]) # predicting for vehicles\n",
							"        cur_time += timedelta(hours=1) # add to a cur_time 1 hour\n",
							"    new_data.index = pd.date_range(\n",
							"        start=lag_data[junction].head(1).index.values[0],\n",
							"        end=pd.Timestamp(2017, 11, 1, 0, 0, 0),\n",
							"        freq='H'\n",
							"    ) # reassign index with the new time range with start is the start of data\n",
							"      # and end time is the end time that initialize in start of the loop\n",
							"    new_data.to_csv(f'vehicles_for_next_4_months_in_junction_{junction}.csv') # to csv that file\n",
							"    print(f'|==Predicted for Junction {junction}==|')"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"papermill": {
								"duration": 0.159619,
								"end_time": "2021-09-27T02:09:39.323872Z",
								"exception": false,
								"start_time": "2021-09-27T02:09:39.164253Z",
								"status": "completed"
							},
							"tags": []
						},
						"source": [
							"# Conclusion\n",
							"The highest RMSE is about 5.6, so when using last amounts of Vehicles to predict next hour amounts of Vehicles seem like that RMSE is increasing\n",
							". "
						]
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/nrpmcapsssa')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 15
				},
				"autoScale": {
					"enabled": true,
					"maxNodeCount": 10,
					"minNodeCount": 3
				},
				"nodeCount": 0,
				"nodeSize": "Medium",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "3.3",
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": true,
				"annotations": []
			},
			"dependsOn": [],
			"location": "westus"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/nrpdedicated')]",
			"type": "Microsoft.Synapse/workspaces/sqlPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"collation": "SQL_Latin1_General_CP1_CI_AS",
				"maxSizeBytes": 263882790666240,
				"annotations": []
			},
			"dependsOn": [],
			"location": "westus"
		}
	]
}